const request = require('request');
const mime = require('mime');

const defaultHeaders	= {
	Accept: 'application/json',
	'Accept-Charset': 'utf-8'
};

const defaultPostHeaders = {
	Accept: 'application/json',
	'Accept-Charset': 'utf-8',
	'Content-Type': 'application/json; charset=utf-8'
};

const defaultOptions = {
	followRedirect: true,
	followOriginalHttpMethod: true,
	strictSSL: true,
	maxRedirects: 10
};

const formats = {
	json: {
		parse: (data) => JSON.parse(data),
		serialize: (data) => JSON.stringify(data)
	}
};

const header = (headers, key) => {
	const k = Object.keys(headers).find(s => s.toLowerCase() === key.toLowerCase());
	return k ? headers[k] : undefined;
};

const parse = (body, contentType) => {
	const key = mime.getExtension(contentType);
	if (formats.hasOwnProperty(key)) {
		body = formats[key].parse(body);
	}
	return body;
};

const serialize = (body, contentType) => {
	const key = mime.getExtension(contentType);
	if (formats.hasOwnProperty(key)) {
		body = formats[key].serialize(body);
	}
	return body;
};

const client = (method, uri, body, hdrs, options) => {
	let headers;
	if (body) {
		headers = {
			...defaultPostHeaders,
			...(hdrs || {})
		};
		body = serialize(body, header(headers, 'content-type'));
	} else {
		headers = {
			...defaultHeaders,
			...(hdrs || {})
		};
	}

	const opts = {
		...defaultOptions,
		...(options || {}),
		method,
		uri,
		body,
		headers
	};

	if (!opts.hasOwnProperty('followAllRedirects')) {
		opts.followAllRedirects = opts.followRedirect;
	}

	const promise = new Promise((resolve, reject) => {
		request(opts,
			(error, response) => {
				if (error) {
					return reject(error);
				}

				try {
					const body = parse(response.body, header(response.headers, 'content-type'));
					resolve({ response, body });
				} catch (ex) {
					return reject(ex);
				}
			})
			.on('error', (err) => {
				reject(err);
			});
	});
	return promise;
};

exports = module.exports = {
	invoke: client
};
