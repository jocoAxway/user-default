const sdk = require('axway-flow-sdk');

//
// Responses that do not include a body parameter (HEAD, OPTIONS, DELETE).
//
const noBodyResponseSchema = {
	type: 'object',
	properties: {
		headers: {
			additionalProperties: {
				type: 'string'
			}
		},
		status: {
			type: 'integer'
		}
	}
};

//
// Responses that may include a body.
//
const responseSchema = {
	...noBodyResponseSchema,
	properties: {
		...noBodyResponseSchema.properties,
		body: {}
	}
};

exports = module.exports = (config = {}) => {
	return getNodes(config);
};

function getNodes(config) {
	const action = require('./action')(config);
	const nodes = sdk.init(module);

	// Add the outputs that are common to all methods.
	nodes.addCommonRestOutputs = function (schema = responseSchema) {
		this
			.output('2xx', {
				name: '2XX',
				context: '$.response',
				schema
			})
			.output('3xx', {
				name: '3XX',
				context: '$.response',
				schema
			})
			.output('4xx', {
				name: '4XX',
				context: '$.response',
				schema
			})
			.output('5xx', {
				name: '5XX',
				context: '$.response',
				schema
			})
			.output('error', {
				name: 'Error',
				context: '$.error'
			});
		return this;
	};

	// Add URL parameter
	nodes.addURLParameter = function () {
		this
			.parameter('url', {
				title: 'URL',
				type: 'string',
				description: 'The target URL.',
				format: 'uri'
			}, true /* required */);
		return this;
	};

	// Add URL parameter
	nodes.addHeadersParameter = function () {
		this
			.parameter('headers', {
				title: 'Headers',
				description: 'The HTTP headers to set.',
				type: 'object',
				additionalProperties: {
					type: 'string'
				}
			}, false /* optional */);
		return this;
	};

	//
	// Add parameters that are common across all methods.
	//
	nodes.addAdvancedHTTPParameters = function () {
		this
			.group('Advanced HTTP Options')
			.parameter('insecure', {
				title: 'Insecure',
				description: 'Do not require the SSL certificates to be valid.',
				type: 'boolean',
				default: false
			}, false /* optional */)
			.parameter('followRedirect', {
				title: 'Follow redirect',
				description: 'Follow HTTP 3xx responses as redirects.',
				type: 'boolean',
				default: true
			}, false /* optional */)
			.parameter('maxRedirects', {
				title: 'Maximum redirects',
				description: 'Maximum number of redirects before aborting.',
				type: 'integer',
				default: 10,
				minimum: 1
			}, false /* optional */);
		return this;
	};

	//
	// Add parameters that are common across all methods that receive a response body.
	//
	nodes.addResponseBodyParameters = function () {
		this
			.parameter('encoding', {
				title: 'Response Encoding',
				description: 'The response body encoding. If you expect binary data use \'binary\' as the encoding.',
				type: 'string'
			}, false /* optional */);
		return this;
	};

	//
	// REST Node
	//
	nodes.add('rest', {
		name: 'REST',
		icon: 'icon.svg',
		description: 'The REST node contains methods for making REST requests to HTTP endpoints.',
		category: 'connector'
	});

	// GET
	nodes.method('get', {
		name: 'GET',
		description: 'Use GET APIs to retrieve resources only and not to modify them in any way.'
	})
		.addURLParameter()
		.addHeadersParameter()
		.addAdvancedHTTPParameters()
		.addResponseBodyParameters()
		.addCommonRestOutputs()
		.action(action.get);

	// HEAD
	nodes.method('head', {
		name: 'HEAD',
		description: 'Use HEAD APIs to request the headers that are returned if the specified resource would be requested with a GET API.'
	})
		.addURLParameter()
		.addHeadersParameter()
		.addAdvancedHTTPParameters()
		.addCommonRestOutputs(noBodyResponseSchema)
		.action(action.head);

	// PUT
	nodes.method('put', {
		name: 'PUT',
		description: 'Use PUT APIs primarily to update existing resources, if resource does not exist then API may decide to create a new resource or not.'
	})
		.addURLParameter()
		.parameter('body', {
			title: 'Body',
			description: 'The content to send.'
		}, true /* required */)
		.addHeadersParameter()
		.addAdvancedHTTPParameters()
		.addResponseBodyParameters()
		.addCommonRestOutputs()
		.action(action.put);

	// POST
	nodes.method('post', {
		name: 'POST',
		description: 'Use POST APIs to create new resources.'
	})
		.addURLParameter()
		.parameter('body', {
			title: 'Body',
			description: 'The content to send.'
		}, true /* required */)
		.addHeadersParameter()
		.addAdvancedHTTPParameters()
		.addResponseBodyParameters()
		.addCommonRestOutputs()
		.action(action.post);

	// PATCH
	nodes.method('patch', {
		name: 'PATCH',
		description: 'Use PATCH APIs to make partial updates on a resource.'
	})
		.addURLParameter()
		.parameter('body', {
			title: 'Body',
			description: 'The content to send.'
		}, true /* required */)
		.addHeadersParameter()
		.addAdvancedHTTPParameters()
		.addResponseBodyParameters()
		.addCommonRestOutputs()
		.action(action.patch);

	// DELETE
	nodes.method('delete', {
		name: 'DELETE',
		description: 'Use DELETE APIs to delete resources.'
	})
		.addURLParameter()
		.addHeadersParameter()
		.addAdvancedHTTPParameters()
		.addCommonRestOutputs(noBodyResponseSchema)
		.action(action.delete);

	// OPTIONS
	nodes.method('options', {
		name: 'OPTIONS',
		description: 'Use OPTIONS APIs to determine the options and requirements associated with a resource.'
	})
		.addURLParameter()
		.addHeadersParameter()
		.addAdvancedHTTPParameters()
		.addCommonRestOutputs(noBodyResponseSchema)
		.action(action.options);

	return nodes;
}
