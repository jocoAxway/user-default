const client = require('./client');

exports = module.exports = (config) => {
	return {
		get: (req, cb) => _http('GET', req, false, true, cb),
		head: (req, cb) => _http('HEAD', req, false, false, cb),
		put: (req, cb) => _http('PUT', req, true, true, cb),
		post: (req, cb) => _http('POST', req, true, true, cb),
		patch: (req, cb) => _http('PATCH', req, true, true, cb),
		delete: (req, cb) => _http('DELETE', req, false, false, cb),
		options: (req, cb) => _http('OPTIONS', req, false, false, cb)
	};

	function _http(verb, req, sendBody, receiveBody, cb) {
		const headers = req.params.headers || {};
		const options = {
			followRedirect: (req.params.followRedirect !== undefined) ? req.params.followRedirect : true,
			maxRedirects: req.params.maxRedirects || 10,
			strictSSL: !req.params.insecure,
			encoding: (req.params.encoding && req.params.encoding.toLowerCase() === 'binary') ? null : req.params.encoding
		};
		const body = (req.params.hasOwnProperty('body') && sendBody) ? req.params.body : undefined;
		if (config.proxy) {
			options.proxy = config.proxy;
		}
		client.invoke(verb, req.params.url, body, headers, options).then(
			({ response, body }) => {
				const statusType = (response.statusCode / 100) | 0;
				if (statusType) {
					const resp = {
						status: response.statusCode,
						headers: response.headers
					};

					if (receiveBody) {
						resp.body = body;
					}
					cb[`${statusType}xx`](null, resp);
				} else {
					cb.error(null, response.error);
				}
			},
			(err) => {
				cb.error(null, err);
			}
		);
	}
};
