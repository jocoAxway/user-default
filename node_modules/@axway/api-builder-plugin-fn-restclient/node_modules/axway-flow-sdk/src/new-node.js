const fs = require('fs');
const path = require('path');
const dot = require('dot');
const validate = require('validate-npm-package-name');

dot.templateSettings.strip = false;

function generate(from, to, args) {
	const names = fs.readdirSync(from);
	names.forEach((tname) => {
		const fname = path.join(from, tname);
		const fd = fs.openSync(fname, 'r');
		const stat = fs.fstatSync(fd);
		if (stat.isDirectory()) {
			return generate(path.join(from, tname), path.join(to, tname), args);
		}
		const data = dot.template(fs.readFileSync(fname, 'utf8'))(args);
		const dest = path.join(to, path.basename(tname, '.dot'));
		const dir = path.dirname(dest);
		if (!fs.existsSync(dir)) {
			fs.mkdirSync(dir, 0o700);
		}
		const dfd = fs.openSync(dir, 'r');
		const dirStat = fs.fstatSync(dfd);
		if (!dirStat.isDirectory()) {
			fs.closeSync(dfd);
			throw new Error(`invalid directory: ${dirStat}`);
		}
		fs.closeSync(dfd);
		console.log(`writing: ${dest}`);
		fs.writeFileSync(dest, data, 'utf8');
	});
}

exports = module.exports = function (opts) {
	let name = opts.name;
	if (name && name.startsWith('api-builder-plugin-fn-')) {
		name = name.replace('api-builder-plugin-fn-', '');
	}
	if (!name) {
		throw new Error(`invalid name: ${opts.name}`);
	}
	const result = validate(`api-builder-plugin-fn-${name}`);
	if (!result.validForNewPackages) {
		throw new Error(`invalid package name: ${opts.name}`);
	}

	const capname = name.charAt(0).toUpperCase() + name.slice(1);
	const cwd = opts.cwd || path.join(__dirname, '..');
	const args = {
		name: capname,
		lcname: name.toLowerCase(),
		description: (opts.description || 'TODO').replace(/'/g, '\\\''),
		jsonDescription: (opts.description || 'TODO').replace(/"/g, '\\"')
	};
	const target = path.join('.', `api-builder-plugin-fn-${name}`);
	generate(path.join(cwd, 'templates'), target, args);
};
