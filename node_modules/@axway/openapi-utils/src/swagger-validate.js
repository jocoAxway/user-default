const swaggerParser = require('swagger-parser');
const stSpec20 = require('swagger-tools/lib/specs').v2_0;
const swagger20 = require('swagger-tools/schemas/2.0/schema.json');
const jsonrefs = require('json-refs');
const schemas = require('axway-schema');
schemas.register(swagger20).loadSync();

/**
 * Internal API that provides swagger utilities functions baked by various third party libraries
 *
 * @returns {object} the internal API
 */
module.exports = {

	/**
	 * @returns {object} registered axway schemas
	 */
	axwaySchemas: () => {
		return schemas;
	},

	/**
	 * Validates using AJV (https://github.com/epoberezkin/ajv) under the hood to check the swagger against Swagger 2.0 JSON Schema
	 *
	 * @param {object} swagger the swagger to be validated
	 * @returns {object} the validation results
	 */
	againstSchema: (swagger) => {
		if (!schemas.exists(swagger20.id)) {
			schemas.register(swagger20).loadSync();
		}
		return schemas.validate(swagger20.id, swagger);
	},

	/**
	 * Validates Swagger with swagger-parser library (https://github.com/APIDevTools/swagger-parser)
	 *
	 * @param {object} swagger the swagger to be validated
	 * @param {object} options options applied on validation
	 * @returns {object} the validated document
	 * @throws {error} in case swagger document fails the validation
	 */
	withSwaggerParser: (swagger, options) => {
		/**
		 * The default set of validation options for swagger-parser.
		 * resolve.external = false -> Don't resolves all JSON references.
		 * dereference.circular = false -> Don't allow circular $refs.
		 * validate.schema = false -> Don't validate the schema.
		 */
		const defaultOptions = {
			resolve: {
				external: false
			},
			dereference: {
				circular: false
			},
			validate: {
				schema: false
			}
		};
		const config = options || defaultOptions;
		return swaggerParser.validate(getReplica(swagger), config);
	},

	/**
	 * Validates Swagger with swagger-tools library (https://github.com/apigee-127/swagger-tools)
	 *
	 * This very same function is invoked when invoking middlewareMetadata
	 * It is invoked under the hood by swagger-tools module
	 * Use it in your initial validation to prevent cases where your swagger looks ok but fails semantic validation later in swagger middleware.
	 *
	 * @param {object} swagger the swagger to be validated
	 * @returns {object} the validated results
	 */
	withSwaggerTools: (swagger) => {
		return new Promise((resolve, reject) => {
			stSpec20.validate(swagger, (err, response) => {
				if (err) {
					return reject(err);
				} else {
					return resolve(response);
				}
			});
		});
	},
	/**
	 * Validates Swagger references with json-refs library (https://github.com/whitlockjc/json-refs)
	 *
	 * @param {object} swagger the swagger to be validated
	 * @param {object} options options applied on validation
	 * @returns {object} the validated results
	 */
	validateRefs: (swagger, options) => {
		const defaultOptions = {
			filter: [ 'remote', 'invalid', 'relative' ],
			includeInvalid: true
		};
		const config = options || defaultOptions;
		const refs = jsonrefs.findRefs(swagger, config);
		return Object.keys(refs).reduce((invalid, loc) => {
			const schemaUrl = refs[loc].uri;
			if (!schemas.get(schemaUrl)) {
				invalid.push(schemaUrl);
			}
			return invalid;
		}, []);
	}
};

/**
 * Clonse the provided JSON file.
 *
 * @param {object} json the file to clone.
 * @returns {object} the cloned file.
 */
function getReplica(json) {
	return JSON.parse(JSON.stringify(json));
}
