const validate = require('./swagger-validate');

/**
 * Swagger utilities for API Builder.
 * It is facade to the currently used underlying parsers like ajv, swagger-parser, swagger-tools etc.
 *
 * @param {object} options - configuration parameters of the underlying parsers
 * 								 options.swaggerParserConfig - configuration options for swagger-parser
 * 								 options.findRefsConfig	- configuration options for json-refs findRefs method
 * 								 options.validateRefs - set it to false if references validation and dereferencing must be skipped
 * @returns {object} swagger validation API
 */
module.exports = (options = {}) => {
	return {
		/**
		 * Validate a swagger document.
		 * It applies all of the following:
		 *
		 * - JSON schema validation (via AJV internally)
		 * - Swagger Parser validation
		 * - Schema Reference check (optional)
		 * - Swagger Tools semantic validation
		 *
		 * @param {object} swagger - swagger document
		 * @returns {Promise<object>} the valid swagger document (dereferenced)
		 */
		validateSwagger: async (swagger) => {

			// Step 1. Validate with AJV (this happens internally within axway-schema)
			const schemaErrors = validate.againstSchema(swagger);
			if (schemaErrors) {
				throw new Error(`JSON Schema validation errors: ${schemaErrors}`);
			}

			// Step 2. Validate with swagger parser
			const swaggerParserOutput = await validate.withSwaggerParser(swagger, options.swaggerParser);

			// Step 3. Semantic validation with swagger tools
			// We have two cases here:
			// a. We want to pass references ($ref) to semantic validation algorithm - Endpoints.
			// b. We do not want to pass references ($ref) to semantic validation algorithm - preserve previous behvaiour of Swagger.
			// For case b. we find and remove all the references so they are not checked by swagger-tools on semantic validation.
			// Note this might change in major version for Swagger plugin!
			// Leaving previous strategy commented:
			// const file = (options.validateRefs === false) ? stripReferences(swaggerParserOutput) : dereference(swaggerParserOutput, options.findRefsConfig);

			// We are skipping swagger tools for swagger plugin completely until we find better solution
			// https://techweb.axway.com/jira/browse/RDPP-5485
			if (!(options.validateRefs === false)) {
				// This block is executed only in case of Import API
				const file = dereference(swaggerParserOutput, options.findRefsConfig);
				const swaggerToolsValidationResults = await validate.withSwaggerTools(file);
				if (swaggerToolsValidationResults
					&& swaggerToolsValidationResults.errors
					&& swaggerToolsValidationResults.errors.length > 0) {
					// response contain errors and warnings after validation
					// we might want to reconsider in which case we throw here
					const errors = swaggerToolsValidationResults.errors.reduce((acc, current) => {
						acc = acc.concat(JSON.stringify(current));
						return acc;
					}, '');
					throw new Error(`Swagger semantic validation errors: ${errors}`);
				}
			}
			return swaggerParserOutput;
		}
	};
};

/**
 * Strips all $ref occurences from Swagger file.
 *
 * @param {object} swagger the Swagger file to be processed
 * @returns {object} the copy of the Swagger file with removed $ref occurences
 */
// function stripReferences(swagger) {
// 	const copy = JSON.parse(JSON.stringify(swagger));
// 	const refs = jsonrefs.findRefs(copy, { includeInvalid: true });
// 	Object.keys(refs).forEach(refPath => {
// 		// We strip the first symbol with is '#'
// 		// jsonpointer search with starting symbol '/'
// 		const obj = jsonpointer.get(copy, refPath.substring(1));
// 		delete obj.$ref;
// 	});
// 	return copy;
// }

/**
 * Dereference $ref occurences. Note that dereferencing is made with default options specified
 *
 * @param {object} swagger the Swagger file to be processed
 * @param {object} options options for json-refs findRefs method
 * @returns {object} the dereferenced Swagger file
 * @throws in case there are reference errors
 */
function dereference(swagger, options) {
	const referenceErrors = validate.validateRefs(swagger, options);
	if (referenceErrors.length > 0) {
		throw new Error(`Undefined schemas: ${referenceErrors.join(', ')}`);
	}
	return validate.axwaySchemas().dereference(swagger, {
		target: '#/definitions'
	});
}
