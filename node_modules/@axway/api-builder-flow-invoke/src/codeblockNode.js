const ArrowNode = require('./arrowNode');
const { FlowManager } = require('axway-flow');

class CodeblockNode extends ArrowNode {
	constructor(apibuilder, name, node, spec, flow) {
		super(apibuilder, name, node, spec, flow);
		this.codeblockName = node.method;
		if (this.codeblockName) {
			this.codeblock = this.apibuilder.getCodeblock(this.codeblockName);
			this[this.codeblockName] = (req, cb) => {
				this.codeblock.action(this.apibuilder, req.params, cb);
			};
		}
	}
}

/**
 * Returns the schema function for CodeblockNode.  Is bound to APIBuilder to
 * query the list of codeblocks.
 * @param {Arrow} apibuilder - the API Builder instance
 * @returns {object} generated node handler spec
 */
const getCodeblockNodeSpec = (apibuilder) => {
	apibuilder.logger && apibuilder.logger.trace && apibuilder.logger.trace('Generating Codeblock spec');
	const schema = {
		schemaVersion: '1',
		type: FlowManager.formatNodeHandlerUri('api-builder-flow-invoke', 'codeblock'),
		name: 'Codeblock',
		icon: 'icon-GG-code',
		category: 'core',
		methods: {
		}
	};
	const codeblocks = apibuilder.getCodeblocks();
	for (const name in codeblocks) {
		if (codeblocks.hasOwnProperty(name)) {
			apibuilder.logger && apibuilder.logger.trace && apibuilder.logger.trace(`  adding Codeblock method to spec: ${name}`);
			const codeblock = codeblocks[name];
			const cb = schema.methods[name] = Object.assign({}, codeblock);
			// remove bits of metadata for codeblock that are not spec
			delete cb.schemaVersion;
			delete cb.path;
			delete cb.name;
		}
	}
	return schema;
};

exports = module.exports = {
	handler: CodeblockNode,
	spec: getCodeblockNodeSpec
};
