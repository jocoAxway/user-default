const fs = require('fs');
const path = require('path');
const parseJson = require('parse-json');
const schemas = require('axway-schema');

function upgradeV0toV1(fn, meta, options) {
	if (meta.schemaVersion >= '1') {
		return;
	}
	// bump version
	const logger = options && options.logger;
	meta.schemaVersion = '1';
	logger && logger.debug(`Upgrading codeblock ${fn}`);
	if (options && options.save) {
		fs.writeFileSync(fn, JSON.stringify(meta, null, 4), 'utf-8');
	}
	return meta;
}

function upgrade(fn, meta, options) {
	if (!meta.schemaVersion) {
		return upgradeV0toV1(fn, meta, options);
	}
	return meta;
}

class CodeblockMetadata {
	/**
	 * Loads a codeblock metadata file.  `options` are as follows:
	 * - `logger`: a logger object
	 * - `validator`: a validator object
	 * - `save`: a boolean to enable saving upgraded file (disabled by default)
	 * @public
	 * @param {string} codeblockPath - A path to a codeblock metadata file.
	 * @param {object} [options] - Options.
	 * @returns {object} The parsed and upgraded metadata object.
	 */
	static load(codeblockPath, options) {
		return new Promise((resolve, reject) =>
			fs.readFile(codeblockPath, (err, data) => {
				const name = path.basename(codeblockPath, path.extname(codeblockPath));

				if (err) {
					reject(err);
					return;
				}

				// Check if its a valid JSON
				let codeblock;
				try {
					codeblock = parseJson(data.toString(), codeblockPath);
				} catch (ex) {
					return reject(new Error(`Unable to load codeblock ${name}. ${ex.message}`));
				}

				// Parse and upgrade metadata
				const metadata = upgrade(codeblockPath, codeblock, options);

				// Validate the codeblock metadata
				const error = schemas.validate('http://axway.com/schemas/codeblockmetadata.json', metadata);
				if (error) {
					reject(new Error(`Unable to load codeblock ${name} in ${codeblockPath}: ${error}`));
				}

				resolve(metadata);
			})
		);
	}
}

exports = module.exports = CodeblockMetadata;
