const { status, States } = require('../status');
const { typeofCredential } = require('./handlerUtils');

/**
 * Do type specific initialization of the credential.
 * @param {object} config The config.
 * @param {object} credential The credential to initialize.
 */
function initCredential(config, credential) {
	const tusername = typeofCredential(credential.username);
	const tpassword = typeofCredential(credential.password);

	if (tusername === 'string' && tpassword === 'string') {
		// valid credential
		credential.status = status.ok();
		credential.token = Buffer.from(`${credential.username || ''}:${credential.password || ''}`).toString('base64');
	} else if (tusername === 'undefined') {
		throw new Error(`Invalid configuration for credential ${credential.name}. username must be non-null or empty string`);
	} else if (tpassword === 'undefined') {
		throw new Error(`Invalid configuration for credential ${credential.name}. password must be non-null or empty string`);
	} else {
		// both types are non-null or empty but at least one is null. if either username or password is
		// null then credential is `none` and the action is `unauthorized`.
		credential.status = status({
			credential: States.credential.none,
			action: States.action.needsBasic
		});
	}
}

/**
 * Get the basic auth token.
 * @param {object} credential The credential to get the token for.
 * @returns {*} The basic auth token.
 */
function token(credential) {
	return credential.token || null;
}

exports = module.exports = {
	initCredential,
	token
};
