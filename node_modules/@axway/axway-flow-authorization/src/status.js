
/**
 * The available states.
 */
const States = {};

/**
 * A list of actions that would default the credential's action status to 'error'.
 */
const ERROR_ACTIONS = [
	'unauthorized',
	'needsBasic',
	'needsAPIKey',
	'needsClient',
	'authError',
	'refreshError'
];

/**
 * A list of actions that would default credential's action status to 'warning'(needs user interaction).
 */
const WARNING_ACTIONS = [
	'needsAuth',
	'needsRefresh'
];

/**
 * A list of actions that would default credential's action status to 'ready'.
 */
const READY_ACTIONS = [
	'none'
];

Object.entries({
	credential: [ 'none', 'expired', 'ok' ],
	action: [].concat(ERROR_ACTIONS, WARNING_ACTIONS, READY_ACTIONS)
}).forEach(([ key, states ]) => {
	States[key] = States[key] || {};
	states.forEach(state => {
		States[key][state] = state;
	});
});

/**
 * A set of status, which is used to group credentials, based on the action required.
 */
const ACTION_STATUS = {
	error: 'error',
	warning: 'warning',
	ready: 'ok',
};

/**
 * Get the name of the status group the action belongs to.
 *
 * @param {string} action The name of the action for the given credential.
 *
 * @returns {string} The name of the status group this action belongs to.
 */
function getActionStatus(action) {
	if (ERROR_ACTIONS.indexOf(action) !== -1) {
		return ACTION_STATUS.error;
	} else if (WARNING_ACTIONS.indexOf(action) !== -1) {
		return ACTION_STATUS.warning;
	} else if (READY_ACTIONS.indexOf(action) !== -1) {
		return ACTION_STATUS.ready;
	}

	throw new Error('Invalid action name.');
}

/**
 * Status is a multi-factor concept. There are 3 factors:
 * - status of the configuration (For the current implementation invalid config fails to start so this isn't a concern).
 * - status of the credential.
 * - status of lifecycle actions.
 *
 * For example it's possible to have a valid credential whose refresh has errored. The credential is still
 * valid and usable. Hopefully refresh will succeed prior to expiry of the credential.
 *
 * A chart of what it means:
 * | Credential | Action        | Description |
 * |------------|---------------|-------------|
 * | none       | needsAuth     | There is no credential and no way to get one. Requires user authorization. |
 * | none       | needsBasic    | There is no credential and the basic credentials are null. |
 * | none       | needsAPIKey   | There is no credential and the apiKey is null. |
 * | none       | needsClient   | There is no credential and the client_id and/or client_secret are null |
 * | none       | authError     | There is no credential and was an error in the user authorization. |
 * | none       | unauthorized  | There is no credential and user didn't authorize it. |
 * | none       | needsRefresh  | There is no credential but there is sufficient config to bootstrap it. |
 * | none       | refreshError  | There is no credential and bootstrapping failed. |
 * | expired    | needsAuth     | There credential is expired and no way to refresh. Requires user authorization. |
 * | expired    | authError     | There credential is expired and was an error in the user authorization. |
 * | expired    | unauthorized  | There credential is expired and user didn't authorize it. |
 * | expired    | needsRefresh  | There credential is expired but there is sufficient config to refresh it. |
 * | expired    | refreshError  | There credential is expired and refresh failed. |
 * | ok         | refreshError  | There credential is valid but the background refresh of it failed. |
 * | ok         | none          | There credential is valid and no action required. |
 *
 * @param {object} prevState The previous status state.
 * @param {object} newState The new status delta.
 * @returns {object} The new status.
 */
function status(prevState, newState) {
	prevState = prevState || {};
	if (newState === undefined) {
		newState = prevState;
		prevState = {};
	}

	if (newState && newState.credential && !States.credential[newState.credential]) {
		throw new Error(`Invalid state for credential: ${newState.credential}`);
	}

	if (newState && newState.action && !States.action[newState.action]) {
		throw new Error(`Invalid state for action: ${newState.action}`);
	}
	const action = newState.action || prevState.action || States.action.none;
	return {
		credential: newState.credential || prevState.credential || States.credential.none,
		action,
		action_status: getActionStatus(action)
	};
}

/**
 * Convenience to generate an "ok" status.
 *
 * @returns {Object} An "ok" status object.
 */
status.ok = function () {
	return status({
		credential: States.credential.ok,
		action: States.action.none,
		action_status: ACTION_STATUS.ready
	});
};

module.exports = {
	status,
	States,
	getActionStatus
};
