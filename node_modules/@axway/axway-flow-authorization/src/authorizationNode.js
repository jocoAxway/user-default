const { FlowManager, FlowNode } = require('axway-flow');
const CredentialManager = require('./credentialmanager');

/**
 * Get the spec for the getCredential method.
 *
 * @returns {object} - The getCredential method's spec.
 */
function _getCredentialMethodSpec() {
	const getCredentialsSpec = {
		name: 'Get Credential',
		description: 'The Authorization flow-node can be used to retrieve the value of a known credential by name for use within the flow.',
		parameter: {
			type: 'object',
			properties: {
				name: {
					type: 'string',
					description: 'The name of the configured credential to find and return.'
				}
			},
			required: [ 'name' ],
			additionalProperties: false
		},
		outputs: {
			next: {
				name: 'Next',
				description: 'Successfully retrieved the credential.',
				context: '$.credential',
				schema: {}
			},
			error: {
				name: 'Error',
				description: 'Error retrieving credential with the specified name.',
				context: '$.error',
				schema: {
					type: 'string'
				}
			}
		}
	};

	return getCredentialsSpec;
}

/**
 * Returns the schema function for Authorization node handler.
 *
 * @returns {object} Generated Authorization handler spec.
 */
const getAuthorizationSpec = () => {
	const handlerSpec = {
		schemaVersion: '1',
		type: FlowManager.formatNodeHandlerUri('axway-flow-authorization', 'authz'),
		name: 'Authorization',
		icon: 'icon-GG-key',
		category: 'core',
		methods: {
			getCredential: _getCredentialMethodSpec()
		}
	};

	return handlerSpec;
};

class AuthorizationNode extends FlowNode {
	getCredential(req, cb) {
		const name = req.params.name;

		if (!name) {
			return cb.error(null, 'Missing required parameter: name');
		}

		const authToken = CredentialManager.getCredential(name);
		if (authToken === null) {
			return cb.error(null, 'Unable to resolve credential');
		}

		cb.next(null, authToken);
	}
}

exports = module.exports = {
	handler: AuthorizationNode,
	spec: getAuthorizationSpec
};
