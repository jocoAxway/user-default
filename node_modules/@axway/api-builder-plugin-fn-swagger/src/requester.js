const client = require('@axway/requester');
const chalk = require('chalk');

const operations = {
	all: [ 'GET', 'HEAD', 'PUT', 'POST', 'PATCH', 'DELETE', 'OPTIONS' ],
	receiveBody: [ 'GET', 'PUT', 'POST', 'PATCH' ]
};
let NODE_REQUEST_COUNT = 0;

module.exports = (requestInput, cb, reqLogger) => {
	const { method, url, headers, body, config: requesterConfig } = requestInput;
	if (!operations.all.includes(method)) {
		throw new Error(`HTTP method ${method} is not supported by the requester.`);
	}
	const receiveBody = operations.receiveBody.includes(method);

	// Before each request is fired, bump the the global request count.
	const currentRequestId = NODE_REQUEST_COUNT += 1;
	const inputLog = {
		method,
		url,
		headers,
		body,
		...requesterConfig
	};

	reqLogger.debug(`${chalk.cyan(chalk.dim(`swagger request (${currentRequestId})`))}`, chalk.yellow(JSON.stringify(inputLog)));

	client(method, url, body, headers, requesterConfig).then(
		(resp) => {
			reqLogger.debug(`${chalk.cyan(chalk.dim(`swagger response (${currentRequestId})`))}`, chalk.yellow(JSON.stringify({
				status: resp.response.statusCode,
				headers: resp.response.headers,
				body: resp.body
			})));
			cb(null, { receiveBody, resp });
		},
		(err) => {
			let msg = err;
			try {
				// protect against circular references
				msg = JSON.stringify(err);
			} catch (ex) {
				msg = err;
			}
			reqLogger.error(`${chalk.red(chalk.dim(`swagger response (${currentRequestId})`))}`, chalk.red(msg));
			cb(err);
		}
	);
};
