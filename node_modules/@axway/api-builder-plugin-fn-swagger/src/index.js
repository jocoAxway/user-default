const swaggerToSpec = require('./utils/swagger-to-spec');
const action = require('./action');
const { getServiceConfig } = require('./utils/service-config');
const getSwaggers = require('./utils/swagger-obtain');
const openAPIUtils = require('@axway/openapi-utils')({ validateRefs: false });

module.exports = async (pluginConfig, options) => {
	const flownodes = {};
	let schema = [];

	// Example of how to log from within the swagger plugin
	// const { logger } = options;
	// logger.info('Logging from inside of the swagger plugin.');
	const { logger } = options;

	try {
		await Promise.all(getSwaggers().map(async (api) => {
			const { fileName: swaggerName, swagger } = api;
			logger.trace(`Loading ${swagger.name} swagger`, swaggerName);
			const swaggerLogger = logger.scope(null, { prefix: `[@axway/api-builder-plugin-fn-swagger] [${swaggerName}]` });
			try {
				try {
					await openAPIUtils.validateSwagger(swagger);
				} catch (error) {
					return Promise.reject(new Error(`Invalid or unsupported swagger - '${api.absolute_path}':\n${error}`));
				}
				const serviceConfig = getServiceConfig(pluginConfig, swaggerName, swagger, swaggerLogger);
				const nhUtils = swaggerToSpec(api);

				const { spec, metadata } = await nhUtils.getSpec();
				Object.keys(spec.methods).forEach(method => {
					const inputMetadata = { method, metadata, config: serviceConfig };
					spec.methods[method].action = action.bind(null, inputMetadata);
				});

				// store results
				flownodes[swaggerName] = spec;
				schema = schema.concat(nhUtils.getSchema());
			} catch (err) {
				let errResp;
				if (err instanceof Error) {
					errResp = err;
					errResp.message = `There was a problem loading '${api.absolute_path}':\n${err.message}`;
				} else {
					errResp = new Error(`There was a problem loading '${api.absolute_path}':\n${err}`);
				}
				// Reject the plugin even if only one of the swaggers fails to compile to componentss
				return Promise.reject(errResp);
			}
		}));
	} catch (ex) {
		return Promise.reject(ex);
	}

	return Promise.resolve({
		flownodes,
		schema
	});
};
