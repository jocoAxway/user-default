/**
 * Generates a stub credential for the supplied swagger securityDefinition.
 * @param {object} swagger - The swagger definition from which to create credentials.
 * @param {object} securityDefinitionName - The security definition name.
 * @returns {object} A stub credential.
 */
function stubCredential(swagger, securityDefinitionName) {
	const def = swagger.securityDefinitions[securityDefinitionName];

	if (def.type === 'basic') {
		return {
			type: def.type,
			username: null,
			password: null
		};
	} else if (def.type === 'apiKey') {
		return {
			type: def.type,
			key: null
		};
	} else {
		// oauth2 - there is no other valid type
		const stub = {
			type: def.type,
			flow: def.flow
		};
		if (def.flow === 'accessCode') {
			return {
				...stub,
				authentication_url: def.authorizationUrl,
				token_url: def.tokenUrl,
				scope: Object.keys(def.scopes).join(' '),
				client_id: null,
				client_secret: null,
				access_token: null,
				refresh_token: null
			};
		} else if (def.flow === 'application') { // aka client credential flow
			// note: "application" is client credential flow, renamed in 3.0
			// ref https://swagger.io/docs/specification/authentication/oauth2/#config
			throw new Error(`OAuth 2.0 ${def.flow} flow is not supported`);
			/*
			return {
				...stub,
				authentication_url: def.authorizationUrl,
				token_url: def.tokenUrl,
				scope: Object.keys(def.scopes).join(','),
				client_id: null,
				client_secret: null,
				access_token: null,
				refresh_token: null
			};
			*/
		} else if (def.flow === 'implicit') {
			// Implicit was designed for javascript. It does not use:
			// client_secret, token_url, or refresh_token
			// ref https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2#grant-type-implicit
			throw new Error(`OAuth 2.0 ${def.flow} flow is not supported`);
			/*
			// For when we do support this flow...
			return {
				...stub,
				authentication_url: def.authorizationUrl,
				scope: Object.keys(def.scopes).join(','),
				client_id: null,
				access_token: null
			};
			*/
		} else if (def.flow === 'password') {
			throw new Error(`OAuth 2.0 ${def.flow} flow is not supported`);
			/*
			// For when we do support this flow...
			return {
				...stub,
				token_url: def.tokenUrl,
				scope: Object.keys(def.scopes).join(','),
				client_id: null,
				client_secret: null,
				username: null,
				password: null
			};
			*/
		} else {
			throw new Error(`Unrecognized OAuth 2.0 flow: ${def.flow}`);
		}
	}
}

/**
 * Generates stub credentials for the supplied swagger securityDefinitions and sets
 * them on the supplied `credentials` object.
 * @param {object} swagger - The swagger definition from which to create credentials.
 * @param {object} logger - logger
 * @returns {object} Returns the set of `credentials`
 */
function createStubCredentials(swagger, logger) {
	if (!swagger.securityDefinitions) {
		// optional
		return {};
	}
	return Object.keys(swagger.securityDefinitions)
		.reduce((acc, name) => {
			if (!acc.hasOwnProperty(name)) {
				try {
					acc[name] = stubCredential(swagger, name);
				} catch (e) {
					logger.error(e.message);
				}
			}
			return acc;
		}, {});
}

module.exports = createStubCredentials;
