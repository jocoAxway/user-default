/**
 * Responsible to build proper URIs
 *
 * @param {object} context the context object
 * @returns {String} uri
 */
module.exports = ({ queryData, pathsData, uriMetadata, methodPath, uri: customURI }) => {
	let uri = customURI ? constructUri() : `${uriMetadata.full}${methodPath}`;
	replacePaths();
	addQuery();

	return uri;

	function constructUri () {
		return `${getProtocol()}${getHost()}${getBasePath()}${methodPath}`;
	}

	function getProtocol () {
		const protocolSplitter = '://';
		return `${customURI.protocol || uriMetadata.protocol}${protocolSplitter}`;
	}

	function getHost () {
		const portSplitter = ':';
		const parts = uriMetadata.host.split(portSplitter);
		const port = customURI.port || parts[1];
		if (port) {
			return `${customURI.host || parts[0]}${portSplitter}${port}`;
		} else {
			return customURI.host || parts[0];
		}
	}

	function getBasePath () {
		const basePathSplitter = '/';
		const clientBasePath = customURI.basePath;
		if (!clientBasePath) {
			return uriMetadata.basePath;
		} else if (clientBasePath.startsWith(basePathSplitter)) {
			return clientBasePath;
		} else {
			return `${basePathSplitter}${clientBasePath}`;
		}
	}

	function replacePaths () {
		if (uri.indexOf('{') >= 0) {
			const matchedParams = uri.match(/\{[^}]+\}/g);
			matchedParams.forEach((uriParam) => {
				const param = uriParam.slice(1, -1);
				uri = uri.replace(/\{[^}]+\}/, pathsData[param]);
			});
		}
	}

	function addQuery () {
		if (queryData) {
			for (const requestParamName in queryData) {
				uri += uri.indexOf('?') >= 0 ? '&' : '?';
				uri += `${requestParamName}=${encodeURIComponent(queryData[requestParamName])}`;
			}
		}
	}
};
