const path = require('path');
const fs = require('fs');
const chalk = require('chalk');
const packageName = require('../package.json').name;
const folderName = 'swagger';
const projectDir = process.mainModule.paths[0].split('node_modules')[0].slice(0, -1);
const swaggerDir = path.resolve(projectDir, folderName);
const configDir = path.resolve(projectDir, 'conf');

// this makes sure it doesn't run on a dev npm install
if (process.env.NODE_ENV === 'production') {
	process.exit(0);
}

const banner = (titleColor, textColor, status, msg) => {
	const width = process.stdout.columns,
		border = '='.repeat(width),
		title = `[${status.toUpperCase()}] ${packageName}:\n`;

	msg = msg || '';
	console.log(chalk[titleColor](`\n${border}`));
	console.log(chalk[titleColor].bold(title));
	console.log(chalk[textColor](msg));
	console.log(chalk[titleColor](`${border}\n`));
};

const info = (msg) => {
	banner('green', 'white', 'info', msg);
};

const warn = (msg) => {
	banner('yellow', 'yellow', 'warning', msg);
};

try {
	if (!fs.existsSync(configDir)) {
		info('Could not detect an API Builder project. A \'swagger\' folder was not created.');
	} else if (fs.existsSync(swaggerDir)) {
		info('A \'swagger\' folder already exists in your API Builder project.');
	} else {
		fs.mkdirSync(swaggerDir);
		info('A \'swagger\' folder has been created in your API Builder project.');
	}
} catch (e) {
	warn(e.message);
}
