/**
 * @module api-builder-config
 * @typicalname api-builder-config
 * @exports api-builder-config
 */
/**
 * @private
 */
class Singleton {
	static declare(key, Clazz) {
		const globalSymbols = Object.getOwnPropertySymbols(global);
		const symbol = Symbol.for(key);
		const exists = (globalSymbols.indexOf(symbol) > -1);
		// no dupes
		if (!exists) {
			global[symbol] = new Clazz();
		}
		Object.defineProperty(Clazz, 'instance', {
			get: () => {
				return global[symbol];
			}
		});
		Object.freeze(Clazz);
	}

	static get(key) {
		const symbol = Symbol.for(key);
		return global[symbol];
	}
}

/**
 * A config manager.
 * @instance
 * @class
 */
class ApiBuilderConfig {
	/**
	 * Constructs a config manager.  The instance is a singleton.
	 * @instance
	 */
	constructor() {
		Object.defineProperty(this, 'flags', {
			enumerable: true,
			get: () => this._flags,
			set: (value) => {
				Object.keys(value || {}).forEach((prop) => {
					this._flags[prop] = value[prop];
				});
			}
		});

		this._flags = new Proxy(Object.create(null), {
			get: (obj, prop) => {
				return !!obj[prop];
			},
			set: (obj, prop, value) => {
				if (!value.enabled && value.isBreaking) {
					this.logger && this.logger.warn(value.message);
				} else if (value.enabled && !value.isBreaking) {
					this.logger && this.logger.info(value.message);
				}
				obj[prop] = value.enabled;
				return true;
			},
			deleteProperty: (obj, prop) => {
				delete obj[prop];
				this.logger && this.logger.trace(`property removed: ${prop}`);
				return true;
			}
		});

		this.flagDetails = {};
	}

	/**
	 * Sets the Logger
	 * @param {Logger} logger - A logger.
	 * @Accessible through the instance
	 */
	setLogger(logger) {
		this.logger = logger;
	}

	/**
	 * Clears all flags and resets state.  All registered flags will be automatically re-added
	 * on next load.
	 *
	 * @Accessible through the instance
	 * @return {ApiBuilderConfig} The {@link ApiBuilderConfig} object.
	 */
	clear() {
		Object.keys(this.flags).forEach(key => delete this.flags[key]);
		this.flagDetails = {};
		return this;
	}

}

Singleton.declare('api-builder-config', ApiBuilderConfig);

exports = module.exports = Singleton.get('api-builder-config');
