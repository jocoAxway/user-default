/**
 * Administration package for API Builder developent at runtime.
 * Includes the admin ui and api.
 * @module @axway/api-builder-admin
 * @typicalname api-builder-admin
 */

const API = require('arrow-admin-api'),
	UI = require('arrow-admin-ui'),
	chalk = require('chalk'),
	dns = require('dns'),
	async = require('async'),
	express = require('express'),
	ipfilter = require('express-ipfilter'),
	isipaddress = require('isipaddress');

const DEFAULT_ALLOWED_HOSTS = [ '127.0.0.1', '::1' ];

/**
 * Administration console.
 * @class Admin
 */
class Admin {
	/**
	 * Gets a list of IPs which are allowed hosts.
	 * If API Builder is configured to allow any hostnames, they will be resolved as IPs.
	 *
	 * @param {APIBuilder} apibuilder - API Builder server
	 * @param {array|string} allowedHosts - hostname, or array of hostnames/ips to resolve
	 * @param {function} next - callback
	 */
	resolveAllowedHosts(apibuilder, allowedHosts, next) {
		if (allowedHosts) {
			allowedHosts = typeof allowedHosts === 'string' ? [ allowedHosts ] : allowedHosts;
			const allowedIps = [];
			const tasks = [];

			function lookup(hostname, cb) {
				dns.lookup(hostname, { all: true }, (err, addresses) => {
					if (err) {
						apibuilder.logger.error('Error resolving ' + hostname, err);
						return cb(err);
					}
					addresses.forEach((detail) => {
						apibuilder.logger.trace('Resolved ' + hostname + ' to ' + detail.address);
						allowedIps.push(detail.address);
					});
					cb();
				});
			}
			allowedHosts.forEach((host) => {
				if (isipaddress.test(host)) {
					allowedIps.push(host);
				} else {
					tasks.push((cb) => {
						lookup(host, cb);
					});
				}
			});

			async.series(tasks, (err) => {
				next(err, allowedIps);
			});
		} else {
			next(null, DEFAULT_ALLOWED_HOSTS);
		}
	}

	/**
	 * Returns express middleware which limits access to a subset of allowed IPs
	 *
	 * @param {APIBuilder} apibuilder - API Builder server
	 * @param {array} allowedIps - arrays to limit route access to
	 * @returns {function} access control express middleware
	 */
	getAccessControlMiddleware(apibuilder, allowedIps) {
		const ipfilterMiddleware = ipfilter.IpFilter(
			allowedIps,
			{
				mode: 'allow',
				logF: apibuilder.logger.warn.bind(apibuilder.logger),
				logLevel: 'deny'
			}
		);

		// Return a 403 on IpDeniedError
		function filter(req, res, next) {
			function nextWithErrCheck(err, result) {
				if (err && err instanceof ipfilter.IpDeniedError) {
					res.set('Content-Type', 'charset=utf-8')
						.status(403)
						.send();
				} else {
					next(err, result);
				}
			}
			ipfilterMiddleware(req, res, nextWithErrCheck);
		}

		return filter;
	}

	/**
	 * start the admin
	 * @param {object} apibuilder - API Builder instance
	 * @param {function} callback - callback
	 */
	start(apibuilder, callback) {
		const app = apibuilder.app,
			apiprefix = '/adminapi/v1',
			uiPrefix = '/console',
			config = {
				apikey: apibuilder.config.apikey,
				routes: {},
				apiprefix: apiprefix,
				uiPrefix: uiPrefix,
				apiDocPrefix: apibuilder.config.apidoc.overrides.prefix,
				...apibuilder.config.admin,
				flags: apibuilder.config.flags || {}
			};
		this.apiprefix = apiprefix;
		this.uiPrefix = uiPrefix;

		this.resolveAllowedHosts(apibuilder, config.allowedHosts, (err, result) => {
			if (err) {
				return callback(err);
			} else if (result && result.length > 0) {
				// Restrict access to the Admin to the specified IPs.
				apibuilder.logger.info('Access to API Builder Console restricted to: ' + chalk.yellow(result.join(', ')));
				const accessFilter = this.getAccessControlMiddleware(apibuilder, result);
				app.use(config.apiprefix, accessFilter);
				app.use(config.uiPrefix, accessFilter);
			} else {
				apibuilder.logger.warn('Unrestricted access to API Builder Console');
			}
			// Set up admin API
			API.configure(app, apiprefix, apibuilder);
			// Set up admin UI asynchronously
			new UI(express, apibuilder, app, config);
			apibuilder.logger.info('Access API Builder Console at ' + chalk.yellow.underline(apibuilder.baseurl + uiPrefix) + '. ' + chalk.grey('This will only be available on your dev environment.'));
			callback();
		});
	}
}

module.exports = Admin;
