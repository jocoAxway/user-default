const fs = require('fs');
const path = require('path');

/**
 * this is a built-in auth strategy that will look for a specific
 * strategy defined in the configuration and will either load an
 * internal one (if required) or resolve to a third-party one.
 * this class acts as a fascade on top of the real one we find
 */
function AuthStrategy(server) {
	const { config, logger } = server;
	this.delegate = null;
	// if you don't set it, we don't use auth
	const value = (config.accessControl && config.accessControl.apiPrefixSecurity);

	switch (value) {
		case 'apikey':
			this.delegate = new (require('./headervalue'))(server);
			break;
		case 'basic':
			this.delegate = new (require('./headerauthbasic'))(server);
			break;
		case 'ldap':
			this.delegate = new (require('./ldap'))(server);
			break;
		case 'plugin':
			// this is a third-party module, so let's require it
			if (!config.accessControl.plugin) {
				throw new Error('accessControl.apiPrefixSecurity is plugin but missing the key accessControl.plugin');
			}
			// attempt to set the right location and see if it's a file
			let authPluginPath = path.resolve(process.cwd(), config.accessControl.plugin);
			if (!fs.existsSync(authPluginPath)) {
				// see if we need to append js
				if (path.extname(authPluginPath) !== '.js') {
					authPluginPath += '.js';
					if (!fs.existsSync(authPluginPath)) {
						// see if we can just load as a node_module module
						authPluginPath = path.resolve(process.cwd(), 'node_modules', config.accessControl.plugin);
						if (!fs.existsSync(authPluginPath)) {
							// just fallback, maybe it's global
							authPluginPath = config.accessControl.plugin;
						}
					}
				}
			}
			logger.debug('Trying to load authentication plugin from:', authPluginPath);
			this.delegate = new (require(authPluginPath))(server);
			if (!this.delegate || !this.delegate.validateRequest) {
				throw new Error(`Authentication plugin ${config.accessControl.plugin} is not defined or missing 'validateRequest' function.`);
			}
			break;
		case 'none':
			// no authentication
			break;
		default:
			throw new Error(`Unknown authentication type: ${value}, expected one of: basic, apikey, ldap, plugin, none.`);
	}
	if (!this.delegate) {
		logger.warn('WARNING: Your server has no authentication, accessControl.apiPrefixSecurity is unset.');
	} else {
		logger.info(`Using '${value}' security for APIs prefixed with path ${config.apiPrefix}`);

		if (this.delegate.matchURL) {
			server.registerDeprecationUse('matchURL');
		}
	}
}

/**
 * used by the documentation Test API to allow the plugin to control any authentication
 * headers, etc that should be applied to the request before sending the request.  The
 * opts object is the same object passed to the 'request' node library used to make the
 * URL request.
 */
AuthStrategy.prototype.applyCredentialsForTest = function (opts) {
	if (this.delegate && this.delegate.applyCredentialsForTest) {
		this.delegate.applyCredentialsForTest(opts);
	}
};

/**
 * used by the documentation Test API to allow the plugin to control any authentication
 * response headers, body, etc.
 */
AuthStrategy.prototype.applyResponseForTest = function (response, body) {
	if (this.delegate && this.delegate.applyResponseForTest) {
		return this.delegate.applyResponseForTest(response, body);
	}
	return body;
};

/**
 * called by the server before calling validateRequest to determine if you want
 * to require authentication for this url
 * @deprecated
 */
AuthStrategy.prototype.matchURL = function (req) {
	if (this.delegate) {
		if (this.delegate.matchURL) {
			return this.delegate.matchURL(req);
		}
		// if not provided, we always validate
		return true;
	}
	return false;
};

/**
 * called by the server to request validation of the incoming request. return true if
 * a valid request, return false (or undefined) to deny the request.  The next signature
 * is (err, passed, result)
 */
AuthStrategy.prototype.validateRequest = function (req, resp, next) {
	if (this.delegate) {
		if (this.delegate.validateRequest.length > 2) {
			return this.delegate.validateRequest(req, resp, next);
		} else {
			var result = this.delegate.validateRequest(req, resp);
			next(null, result);
		}
	} else {
		// next(null, true);
		throw new Error('no authentication set');
	}
};

/**
 * Used by Swagger generation to describe the Swagger Definitions Object and the
 * Swagger Requirement Object authentication mechanism.
 * mechansim to swagger.  See:
 * https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#security-definitions-object
 */
AuthStrategy.prototype.getSwaggerSecurity = function () {
	if (this.delegate && this.delegate.getSwaggerSecurity) {
		return this.delegate.getSwaggerSecurity();
	}
};

module.exports = AuthStrategy;
