
var LdapAuth = require('ldapauth-fork');

function LDAPAuthStrategy(server) {
	this.auth = new LdapAuth(server.config.ldap);
}

LDAPAuthStrategy.prototype.validateRequest = function (req, resp, next) {
	var key = req.headers.authorization;
	if (!key) {
		return next(null, false);
	}

	var base64 = key.split(' ')[1];
	var usernamePassword = Buffer.from(base64, 'base64').toString();

	var creds = usernamePassword.split(':');
	var username = creds[0];
	var password = creds[1];

	function handleError(err) {
		next(err || 'ldap error');
	}

	this.auth.on('connectTimeout', handleError);
	this.auth.on('error', handleError);
	this.auth.authenticate(username, password, function (err) {
		this.auth.removeListener('connectTimeout', handleError);
		this.auth.removeListener('error', handleError);
		if (err) {
			return next(null, false);
		}
		return next(null, true);
	}.bind(this));
};

LDAPAuthStrategy.prototype.getSwaggerSecurity = function () {
	return {
		securityDefinitions: {
			basicAuth: {
				type: 'basic',
				description: 'Require authorized access to API'
			}
		},
		security: [{
			basicAuth: []
		}]
	};
};

// An improvement could be made here to have these authorization plugins export a schema that the
// testapi UI can use to render the necessary inputs.
LDAPAuthStrategy.prototype.applyCredentialsForTest = function (opts) {
	opts.auth = {
		username: null,
		password: null
	};
};

module.exports = LDAPAuthStrategy;
