const chalk = require('chalk');
const util = require('util');
const { deprecate } = require('util');

const levels = [ 'trace', 'debug', 'info', 'warn', 'error', 'fatal' ];

// The APIBuilder.Logger object is defined here:
// http://docs.appcelerator.com/platform/latest/#!/api/APIBuilder.Logger
//
// The actual appc-logger has additional, undocumented methods, such as ConsoleLogger,
// JSONStreamer, createHttpLogger, createExpressLogger, specialObjectClone,
// specialObjectClone, etc.  Since they're not documented, they don't exist.
//
// Unfortunately, APIBuilder.Logger is a defined API object, so need to maintain compatability
// with it.

/**
 * @class APIBuilder.Logger
 * The API Builder Logger class provides a logging utility. You can access
 * a local instance of the log utility using the `logger` property of the API Builder
 * instance.
 */
class Logger {
	/**
	 * @property {Number} TRACE
	 * Constant indicating the trace level
	 * @static
	 */
	static get TRACE() {
		return 10;
	}

	/**
	 * @property {Number} DEBUG
	 * Constant indicating the debug level
	 * @static
	 */
	static get DEBUG() {
		return 20;
	}

	/**
	 * @property {Number} INFO
	 * Constant indicating the info level
	 * @static
	 */
	static get INFO() {
		return 30;
	}

	/**
	 * @property {Number} WARN
	 * Constant indicating the warn level
	 * @static
	 */
	static get WARN() {
		return 40;
	}

	/**
	 * @property {Number} ERROR
	 * Constant indicating the error level
	 * @static
	 */
	static get ERROR() {
		return 50;
	}

	/**
	 * @property {Number} FATAL
	 * Constant indicating the fatal level
	 * @static
	 */
	static get FATAL() {
		return 60;
	}

	/**
	 * @property {Number} NONE
	 * Constant indicating the none level
	 * @static
	 */
	static get NONE() {
		return 70;
	}

	/**
	 * @method createLogger
	 * Creates a log utility instance.
	 * @static
	 * @param {Object} options Additional initialization options.
	 * @return {APIBuilder.Logger}
	 */
	static createLogger(config) {
		const logger = new Logger(config);
		logger.stripColors = deprecate(
			logger.stripColors, 'Logger.stripColors() is deprecated since v4.0'
		);
		return logger;
	}

	/**
	 * @method createDefaultLogger
	 * @alias #static-method-createLogger
	 * @static
	 * @deprecated since version 4.0
	 * @param {Object} config - Additional initialization options.
	 * @return {APIBuilder.Logger}
	 */
	static createDefaultLogger(config) {
		return this.createLogger(config);
	}

	/**
	 * @method createRestifyLogger
	 * Creates a restify version of the log utility.
	 * @static
	 * @deprecated since version 4.0
	 * @param {APIBuilder} apibuilder - API Builder instance.
	 * @param {Object} config - Additional initialization options.
	 * @return {APIBuilder.Logger}
	 */
	static createRestifyLogger(apibuilder, config) {
		return this.createLogger(config);
	}

	/**
	 * Creates a logger instance.
	 */
	constructor(config) {
		this.config = {
			log: config && config.log
		};
		if (config && config.level) {
			this.level(config.level);
		} else {
			this.level(Logger.NONE);
		}
	}

	/**
	 * @method level
	 * Sets or retrieves the log level.
	 * @param {Number/String} [level] Level to set.
	 * @return {Number} - The log level.
	 */
	level(level) {
		if (level !== undefined) {
			if (typeof level === 'string') {
				const uclevel = level.toUpperCase();
				if (!Logger.hasOwnProperty(uclevel)) {
					throw new Error(`invalid logging level ${level}`);
				}
				this.config.level = Logger[uclevel];
			} else {
				this.config.level = level;
			}
		}
		return this.config.level;
	}

	/**
	 * @method trace
	 * Logs a message with a trace-level severity.
	 * @param {...Object} [params] String, formatted-string with variables, object or
	 *		Error object.
	 * @return {Boolean/void} - If no arguments are passed, returns a boolean indicating
	 *		if the trace level is enabled.
	 */
	trace(...params) {
		log(this.config, 'TRACE', ...params);
	}

	/**
	 * @method debug
	 * Logs a message with a debug-level severity.
	 * @param {...Object} [params] String, formatted-string with variables, object or
	 *		Error object.
	 * @return {Boolean/void} - If no arguments are passed, returns a boolean indicating
	 *		if the debug level is enabled.
	 */
	debug(...params) {
		log(this.config, 'DEBUG', ...params);
	}

	/**
	 * @method info
	 * Logs a message with a info-level severity.
	 * @param {...Object} [params] String, formatted-string with variables, object or
	 *		Error object.
	 * @return {Boolean/void} - If no arguments are passed, returns a boolean indicating
	 *		if the info level is enabled.
	 */
	info(...params) {
		log(this.config, 'INFO', ...params);
	}

	/**
	 * @method warn
	 * Logs a message with a warn-level severity.
	 * @param {...Object} [params] String, formatted-string with variables, object or
	 *		Error object.
	 * @return {Boolean/void} - If no arguments are passed, returns a boolean indicating
	 *		if the warn level is enabled.
	 */
	warn(...params) {
		log(this.config, 'WARN', ...params);
	}

	/**
	 * @method error
	 * Logs a message with a error-level severity.
	 * @param {...Object} [params] String, formatted-string with variables, object or
	 *		Error object.
	 * @return {Boolean/void} - If no arguments are passed, returns a boolean indicating
	 *		if the error level is enabled.
	 */
	error(...params) {
		log(this.config, 'ERROR', ...params);
	}

	/**
	 * @method fatal
	 * Logs a message with a fatal-level severity.
	 * @param {...Object} [params] String, formatted-string with variables, object or
	 *		Error object.
	 * @return {Boolean/void} - If no arguments are passed, returns a boolean indicating
	 *		if the fatal level is enabled.
	 */
	fatal(...params) {
		log(this.config, 'FATAL', ...params);
	}

	/**
	 * Remove any ANSI color codes from the string.
	 * @deprecated since version 4.0
	 * @param {string} str raw string to strip color codes from
	 * @returns {string}
	 */
	stripColors(str) {
		return String(str).replace(/\27\[\d+m/g, '');
	}

	/**
	 * @method scope
	 * Creates a log utility instance with request-level scope.
	 *
	 * @param {Object} request - The request object.
	 * @param {Object} [options] - A set of additional options that would affect the scoping of the logger.
	 * @param {string} [options.prefix] - The prefix to be used for the logging.
	 * @returns {APIBuilder.Logger}
	 * @private
	 */
	scope(req, options = {}) {
		const { prefix } = options;
		const config = Object.assign({}, this.config);
		const logPrefix = prefix ? prefix : `[request-id: ${req.getId()}]`;

		const logger = new Logger(config);

		// Rewrite the log functions to include the request scope
		levels.forEach((level) => {
			logger[level] = (...args) => log(logger.config, level.toUpperCase(), logPrefix, ...args);
		});

		// Bind additional methods to the request specific logger.
		logger.logRequest = logRequest.bind(null, logger);
		logger.logResponse = logResponse.bind(null, logger);

		return logger;
	}
}

const cmap = {
	TRACE: { color: chalk.grey, log: console.log },
	DEBUG: { color: chalk.cyan, log: console.log },
	INFO: { color: chalk.whiteBright, log: console.log },
	WARN: { color: chalk.yellow, log: console.warn },
	ERROR: { color: chalk.red, log: console.error },
	FATAL: { color: chalk.red, log: console.error }
};

function log(config, levelName, ...args) {
	const ts = Date.now();
	const strs = args.map((arg) => {
		if (arg instanceof Error) {
			return arg.stack.replace(/[\r\n]+/g, ' ');
		} else if (typeof arg === 'object') {
			return JSON.stringify(arg);
		}
		return arg;
	});
	const levelValue = Logger[levelName];
	if (levelValue >= config.level) {
		const entry = cmap[levelName];
		// config.log is an internal way to override the console logging and plug another logger
		// e.g. for testing/scanning log messages.
		const logfn = config.log || entry.log;
		logfn(chalk.grey(ts), entry.color(util.format(...strs)));
	}
}

/**
 * Specialized bookend function to log the request.
 * @param {object} logger - The logger.
 * @param {object} req - The request.
 */
function logRequest(logger, req) {
	logger.info('Request', chalk.grey(JSON.stringify(req)));
}

/**
 * Specialized bookend function to log the response.
 * @param {object} logger - The logger.
 * @param {object} req - The request.
 */
function logResponse(logger, resp) {
	logger.info('Response', chalk.grey(JSON.stringify(resp)));
}

Logger.createDefaultLogger = deprecate(
	Logger.createDefaultLogger, 'Logger.createDefaultLogger() is deprecated since v4.0'
);
Logger.createRestifyLogger = deprecate(
	Logger.createRestifyLogger, 'Logger.createRestifyLogger() is deprecated since v4.0'
);

exports = module.exports = Logger;
