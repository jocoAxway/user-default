/**
 * A registry of the flow node handlers by type.
 * @public
 * @class
 */
class NodeRegistry {
	/**
	 * Create the node registry.
	 * @constructor
	 */
	constructor() {
		this.init();
	}

	/**
	 * Initialize the node handler cache.
	 * @public
	 */
	init() {
		this.nodeHandlers = {};
	}

	/**
	 * Allow dynamic extension of the supported node types.
	 * @public
	 * @param {string} type - The type of the handler.
	 * @param {FlowNode} handler - A FlowNode type that has the business logic for this node type.
	 * @param {object} spec - The node handler definition.
	 */
	registerNode(type, handler, spec) {
		if (this.nodeHandlers.hasOwnProperty(type)) {
			throw new ReferenceError(`flow-node type already registered: ${type}`);
		}
		this.nodeHandlers[type] = { handler, spec };
	}

	/**
	 * Dynamically unregister a supported node type.
	 * @public
	 * @param {string} uri - The unique uri of the node the handler to unregister
	 *						 (see `formatNodeHandlerUri`).
	 */
	unregisterNode(uri) {
		if (!this.nodeHandlers.hasOwnProperty(uri)) {
			return;
		}
		delete this.nodeHandlers[uri];
	}

	/**
	 * Gets a node handler by uri.
	 * @public
	 * @param {string} uri - The unique uri of the node the handler to unregister
	 *						 (see `formatNodeHandlerUri`).
	 * @return {FlowNode} The node handler.
	 */
	getRegisteredNode(uri) {
		if (!this.nodeHandlers.hasOwnProperty(uri)) {
			throw new ReferenceError(`Unknown flow-node: ${uri}`);
		}
		return this.nodeHandlers[uri].handler;
	}

	/**
	 * Create an instance of the node type handler.
	 * @public
	 * @param {string} id - The id of the node.
	 * @param {object} node - The definition for the node.
	 * @param {Flow} flow - The flow parenting the node.
	 * @returns {NodeHandler} the created NodeHandler
	 */
	create(id, node, flow) {
		if (!this.nodeHandlers[node.type]) {
			throw new Error(`Cannot create '${id}' in '${flow.id}' flow. No flow handler registered to handle type '${node.type}'.`);
		}
		const NodeHandler = this.nodeHandlers[node.type].handler;
		return new NodeHandler(id, node, this.getNodeSpec(node.type), flow);
	}

	/**
	 * Gets the node handler definition.
	 * @public
	 * @param {string} uri - The unique uri of the node the handler to unregister
	 *						 (see `formatNodeHandlerUri`).
	 * @returns {object} node handler spec
	 */
	getNodeSpec(uri) {
		if (!this.nodeHandlers.hasOwnProperty(uri)) {
			throw new ReferenceError(`Unknown flow-node: ${uri}`);
		}
		const spec = this.nodeHandlers[uri].spec;
		if (spec.type !== uri) {
			throw new Error(`Mismatch between registered uri '${uri}' and the spec type '${spec.type}'`);
		}
		return spec;
	}

	/**
	 * Gets all of the available node handler specs.
	 * @public
	 * @returns {object|array} The node handler specs.
	 */
	getNodeSpecs() {
		return Object.keys(this.nodeHandlers).reduce((specs, uri) => {
			specs[uri] = this.getNodeSpec(uri);
			return specs;
		}, {});
	}
}

exports = module.exports = new NodeRegistry();
