const FlowNode = require('../flownode');
const FlowManager = require('../flowmanager');
const deepEqual = require('deep-equal');

/**
 * Condition node for testing attributes.
 *
 * @example <caption>Example flow node</caption>
 * "step.1": {
 *   "type": "nodehandler://axway-flow/condition",
 *   "method": "equals",
 *   "parameters": [{
 *     "name": "source",
 *     "value": "$.data.species|0"
 *   }, {
 *     "name": "value",
 *     "value": "homo sapien",
 *     "type": "string"
 *   }],
 *   "response": {
 *     "true": { },
 *     "false": { },
 *   }
 * }
 */
class Condition extends FlowNode {
	exists(req, cb) {
		const result = req.params.source !== undefined;
		cb[`${result}`](null, result);
	}

	equals(req, cb) {
		const output = deepEqual(req.params.source, req.params.value, { strict: true });
		cb[`${output}`](null, output);
	}

	'less-than'(req, cb) {
		const output = req.params.source < req.params.value;
		cb[`${output}`](null, output);
	}

	'less-than-equal'(req, cb) {
		const output = req.params.source <= req.params.value;
		cb[`${output}`](null, output);
	}

	'greater-than'(req, cb) {
		const output = req.params.source > req.params.value;
		cb[`${output}`](null, output);
	}

	'greater-than-equal'(req, cb) {
		const output = req.params.source >= req.params.value;
		cb[`${output}`](null, output);
	}
}

function getConditionSpec() {
	return {
		schemaVersion: '1',
		type: FlowManager.formatNodeHandlerUri('axway-flow', 'condition'),
		name: 'Condition',
		icon: 'icon-GG-if-then',
		category: 'core',
		methods: {
			exists: {
				name: 'Exists',
				description: 'Tests a value exists, true or false.',
				parameter: {
					type: 'object',
					properties: {
						source: {
							description: 'The input to test.'
						}
					},
					required: [
						'source'
					],
					additionalProperties: false
				},
				outputs: {
					true: {
						name: 'True',
						description: 'The condition tested true.',
						context: '$.exists',
						schema: {
							type: 'boolean'
						}
					},
					false: {
						name: 'False',
						description: 'The condition tested false.',
						context: '$.exists',
						schema: {
							type: 'boolean'
						}
					}
				}
			},
			equals: {
				name: 'Equals',
				description: 'Tests a value is equal.',
				parameter: {
					type: 'object',
					properties: {
						source: {
							description: 'The input to test.'
						},
						value: {
							description: 'The value to test input against.'
						}
					},
					required: [
						'source',
						'value'
					],
					additionalProperties: false
				},
				outputs: {
					true: {
						name: 'True',
						description: 'The condition tested true.',
						context: '$.equals',
						schema: {
							type: 'boolean'
						}
					},
					false: {
						name: 'False',
						description: 'The condition tested false.',
						context: '$.equals',
						schema: {
							type: 'boolean'
						}
					}
				}
			},
			'less-than': {
				name: 'Less Than',
				description: 'Tests a value is less than another.',
				parameter: {
					type: 'object',
					properties: {
						source: {
							description: 'The input to test.'
						},
						value: {
							description: 'The value to test input against.'
						}
					},
					required: [
						'source',
						'value'
					],
					additionalProperties: false
				},
				outputs: {
					true: {
						name: 'True',
						description: 'The condition tested true.',
						context: '$.lessThan',
						schema: {
							type: 'boolean'
						}
					},
					false: {
						name: 'False',
						description: 'The condition tested false.',
						context: '$.lessThan',
						schema: {
							type: 'boolean'
						}
					}
				}
			},
			'less-than-equal': {
				name: 'Less Than or Equal',
				description: 'Tests a value is less than or equal to another.',
				parameter: {
					type: 'object',
					properties: {
						source: {
							description: 'The input to test.'
						},
						value: {
							description: 'The value to test input against.'
						}
					},
					required: [
						'source',
						'value'
					],
					additionalProperties: false
				},
				outputs: {
					true: {
						name: 'True',
						description: 'The condition tested true.',
						context: '$.lessThanEqual',
						schema: {
							type: 'boolean'
						}
					},
					false: {
						name: 'False',
						description: 'The condition tested false.',
						context: '$.lessThanEqual',
						schema: {
							type: 'boolean'
						}
					}
				}
			},
			'greater-than': {
				name: 'Greater Than',
				description: 'Tests a value is greater than another.',
				parameter: {
					type: 'object',
					properties: {
						source: {
							description: 'The input to test.'
						},
						value: {
							description: 'The value to test input against.'
						}
					},
					required: [
						'source',
						'value'
					],
					additionalProperties: false
				},
				outputs: {
					true: {
						name: 'True',
						description: 'The condition tested true.',
						context: '$.greaterThan',
						schema: {
							type: 'boolean'
						}
					},
					false: {
						name: 'False',
						description: 'The condition tested false.',
						context: '$.greaterThan',
						schema: {
							type: 'boolean'
						}
					}
				}
			},
			'greater-than-equal': {
				name: 'Greater Than or Equal',
				description: 'Tests a value is greater than or equal to another.',
				parameter: {
					type: 'object',
					properties: {
						source: {
							description: 'The input to test.'
						},
						value: {
							description: 'The value to test input against.'
						}
					},
					required: [
						'source',
						'value'
					],
					additionalProperties: false
				},
				outputs: {
					true: {
						name: 'True',
						description: 'The condition tested true.',
						context: '$.greaterThanEqual',
						schema: {
							type: 'boolean'
						}
					},
					false: {
						name: 'False',
						description: 'The condition tested false.',
						context: '$.greaterThanEqual',
						schema: {
							type: 'boolean'
						}
					}
				}
			}

		}
	};
}

exports = module.exports = {
	handler: Condition,
	spec: getConditionSpec
};
