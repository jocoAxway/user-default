const chalk = require('chalk');

/**
 * Returns the options required for scoping the logging of requests/responses for nodes.
 *
 * Outputs the following format:
 * 	[request-id: abc1234] getInventory (petstore.1)
 *
 * @param {Object} scopeData - The data to build the scopped version of the logger with.
 * @param {string} scopeData.reqId - The originating request-id.
 * @param {string} scopeData.nodeId - The ID of the node that is making the request.
 * @param {string} scopeData.methodName - The method invoked on that node.
 *
 * @returns {Object} The node options for logger scoping.
 */
function buildScopeOptions(scopeData) {
	const { reqId, nodeId, methodName } = scopeData;
	const prefix = `[request-id: ${reqId}]   ${chalk.green(`${methodName} (${nodeId})`)}`;
	return {
		prefix
	};
}

/**
 * Returns a scoped logger based on the node's data.
 *
 * @param {Object} logger - A logger instance.
 * @param {Object} scopeData - The data to build the scopped version of the logger with.
 * @param {string} scopeData.reqId - The originating request-id.
 * @param {string} scopeData.nodeId - The ID of the node that is making the request.
 * @param {string} scopeData.methodName - The method invoked on that node.
 *
 * @returns {Object} The scopped logger based on the node's data.
 */
function scopeNodeLogger(logger, scopeData) {
	const loggerOptions = buildScopeOptions(scopeData);

	// Scope the requst logger based on the node's details
	const reqLogger = logger.scope(null, loggerOptions);

	// Freeze the scopped logger, to prevent malicious changes
	return Object.freeze(reqLogger);
}

/**
 * Gets the name of a node via node id or node
 * @param  {object} nodeInput - A flow node
 * @return {string}      The node name followed by the node id
 */
function formatNodeName(nodeInput) {
	const { node, id } = (nodeInput || {});
	const name = (node && node.name && `${node.name} `) || '';
	const idStr = id ? `(${id})` : '';
	return `${name}${idStr}`;
}

exports = module.exports = {
	formatNodeName,
	scopeNodeLogger
};
