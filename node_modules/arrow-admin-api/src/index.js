const
	path = require('path'),
	pkg = require('../package.json'),
	Swagger = require('openapi-doc'),
	schemas = require('axway-schema'),
	nocache = require('nocache'),
	APIsAPI = require('./api/APIsAPI'),
	APIsController = require('./api/APIsController'),
	CodeblocksAPI = require('./codeblocks/CodeblocksAPI'),
	CodeblocksController = require('./codeblocks/CodeblocksController'),
	ConfigurationAPI = require('./config/ConfigurationAPI'),
	ConfigurationController = require('./config/ConfigurationController'),
	ConnectorsAPI = require('./connectors/ConnectorsAPI'),
	ConnectorsController = require('./connectors/ConnectorsController'),
	CredentialsAPI = require('./authorization/CredentialsAPI'),
	CredentialsController = require('./authorization/CredentialsController'),
	EndpointsAPI = require('./endpoints/EndpointsAPI'),
	EndpointsController = require('./endpoints/EndpointsController'),
	FlowsAPI = require('./flows/FlowsAPI'),
	FlowsController = require('./flows/FlowsController'),
	ModelsAPI = require('./models/ModelsAPI'),
	ModelsController = require('./models/ModelsController'),
	ProjectAPI = require('./project/ProjectAPI'),
	ProjectController = require('./project/ProjectController'),
	SchemaAPI = require('./schema/SchemaAPI'),
	SchemaController = require('./schema/SchemaController'),
	SystemAPI = require('./system/SystemAPI'),
	SystemController = require('./system/SystemController'),
	TestAPI = require('./testapi/TestAPI'),
	TestController = require('./testapi/TestController'),
	NodehandlersAPI = require('./nodehandlers/NodehandlersAPI'),
	NodehandlersController = require('./nodehandlers/NodehandlersController');

function generateSwagger(openapidoc) {
	const rawdoc = openapidoc.apidoc();
	return schemas.dereference(rawdoc, {
		target: '#/definitions',
		rename: (id) => {
			if (id.endsWith('/flow-schema')) {
				return 'Flow';
			} else if (id.endswith('/codeblockmetadata.json')) {
				return 'Codeblock';
			}
			return path.basename(id);
		}
	});
}

function configure(app, prefix, apibuilder, swagger) {
	apibuilder.logger.trace('Configuring Console API, prefix:', prefix);

	swagger = swagger || new Swagger();

	swagger
		.info(
			pkg.name,
			pkg.version,
			pkg.description
		)
		.basePath(prefix)
		.globalProduces('application/json')
		.globalConsumes('application/json');

	const ctx = {
		app,
		prefix,
		apibuilder,
		swagger
	};

	const flowsController = new FlowsController(ctx);

	// define swagger API for all endpoints
	APIsAPI.bind(new APIsController(ctx), ctx);
	CodeblocksAPI.bind(new CodeblocksController(ctx), ctx);
	ConfigurationAPI.bind(new ConfigurationController(ctx), ctx);
	ConnectorsAPI.bind(new ConnectorsController(ctx), ctx);
	CredentialsAPI.bind(new CredentialsController(ctx), ctx);
	EndpointsAPI.bind(new EndpointsController(ctx, { flowsController }), ctx);
	FlowsAPI.bind(flowsController, ctx);
	ModelsAPI.bind(new ModelsController(ctx), ctx);
	ProjectAPI.bind(new ProjectController(ctx), ctx);
	SchemaAPI.bind(new SchemaController(ctx), ctx);
	SystemAPI.bind(new SystemController(ctx), ctx);
	TestAPI.bind(new TestController(ctx), ctx);
	NodehandlersAPI.bind(new NodehandlersController(ctx), ctx);

	// bind swagger APIs
	Swagger.forEachAction(swagger, (verb, operationPath) => {
		try {
			const endpoint = Swagger.endpointToExpress(prefix + operationPath);
			apibuilder.logger.debug(`binding admin api (${verb}) ${endpoint}`);
			app[verb](
				endpoint,
				nocache(),
				Swagger.securityMiddleware(swagger, verb, operationPath),
				Swagger.actionMiddleware(swagger, verb, operationPath)
			);
		} catch (ex) {
			apibuilder.logger.error(ex);
		}
	});

	apibuilder.logger.debug('Configured API Builder Console API');
}

exports = module.exports = {
	configure,
	generateSwagger
};
