const fs = require('fs'),
	path = require('path'),
	http = require('http');

function statusMessage(code) {
	return http.STATUS_CODES[String(code)];
}

function mkdirIfNotExists(dir, next) {
	fs.stat(dir, (err, stats) => {
		if (err) {
			if (err.code === 'ENOENT') {
				fs.mkdir(dir, 0o700, next);
			} else {
				next(err);
			}
		} else if (!stats.isDirectory()) {
			next(new Error(`${dir} is not a directory.`));
		} else {
			next();
		}
	});
}

/**
 * Makes a safe filename from `name`.
 * @param {string} name - the name of the file
 * @returns {string} the path to the file with a safe filename
 */
function safeFilename(name) {
	const camelCaseName = name.toLowerCase()
		.replace(/(?:\s)[a-z]/g, (match) => {
			return match.toUpperCase().trim();
		});
	const traversal = path.relative(path.sep, path.join(path.sep, camelCaseName));
	const safe = traversal.replace(/[/,?,<,>,\\,:,*,|,",',., ]/g, '');
	return path.relative(path.sep, path.join(path.sep, safe));
}

/**
 * Checks that `name` is a safe filename.  A filename is considered safem if it
 * doesnt contain any of the OS reserved characters.
 *
 * This function has no relationship with `safeFilename`.
 * @param {string} name - the name of the file
 * @returns {boolean} if the name is a safe file name
 */
function isSafeFilename(name) {
	return name.match(/[/,?,<,>,\\,:,*,|,",',.]/g) === null;
}

/**
 * Writes an object to a file at a given path
 *
 * @param {string} fn - file path
 * @param {object} data - object to stringify and write to file
 * @param {function} cb - callback
 */
function writeJSONFile(fn, data, cb) {
	if (!data || typeof data !== 'object') {
		throw new TypeError('Invalid parameter "data"');
	}
	const opts = {
		flag: 'w',
		encoding: 'utf-8',
		mode: 0o644
	};

	fs.writeFile(fn, JSON.stringify(data, null, 2), opts, cb);
}

/**
 * Writes a file to disk. If a file already exists at the specified location,
 * the file will be written with .1 .2 etc.. appended to the name.
 *
 * @param {string} dir - directory to write to
 * @param {string} name - filename
 * @param {object} data - data to write to file
 * @param {function} cb - callback
 */
function writeUniqueJSONFile(dir, name, data, cb) {
	const originalName = name;
	let count = 0;
	const _writeUniqueFileRec = (filename, cb2) => {
		const fn = path.join(dir, `${filename}.json`);
		fs.stat(fn, (err) => {
			if (err) {
				if (err.code === 'ENOENT') {
					// file does not exist
					return writeJSONFile(fn, data, e => {
						cb2(e, fn);
					});
				}
				// other error
				return cb2(err);
			}
			// already exists. try with a different name
			count++;
			return _writeUniqueFileRec(`${originalName}.${count}`, cb2);
		});
	};
	_writeUniqueFileRec(originalName, (err, fn) => {
		if (err) {
			return cb(err);
		}
		return cb(null, fn);
	});
}

const arrowQueryOptions = [{
	in: 'query',
	name: 'limit',
	description: 'The number of records to fetch. The value must be greater than 0, and no greater than 1000.',
	required: false,
	type: 'number',
	minimum: 0,
	maximum: 1000
},
{
	in: 'query',
	name: 'skip',
	description: 'The number of records to skip. The value must not be less than 0.',
	required: false,
	type: 'number',
	minimum: 0
},
{
	in: 'query',
	name: 'where',
	description: 'Constrains values for fields. The value should be encoded JSON.',
	required: false,
	type: 'string',
	format: 'json'
},
{
	in: 'query',
	name: 'order',
	description: 'A dictionary of one or more fields specifying sorting of results. In general, you can sort based on any predefined field that you can query using the where operator, as well as on custom fields. The value should be encoded JSON.',
	required: false,
	type: 'string',
	format: 'json'
},
{
	in: 'query',
	name: 'sel',
	description: 'Selects which fields to return from the query. Others are excluded. The value should be encoded JSON.',
	required: false,
	type: 'string',
	format: 'json'
},
{
	in: 'query',
	name: 'unsel',
	description: 'Selects which fields to not return from the query. Others are included. The value should be encoded JSON.',
	required: false,
	type: 'string',
	format: 'json'
}];

const arrowQueryParameter = arrowQueryOptions.reduce((acc, cur) => {
	acc[cur.name] = {
		type: cur.type,
		description: cur.description,
		['default']: cur.default
	};
	return acc;
}, {});

exports = module.exports = {
	statusMessage,
	mkdirIfNotExists,
	safeFilename,
	isSafeFilename,
	arrowQueryOptions,
	arrowQueryParameter,
	writeJSONFile,
	writeUniqueJSONFile
};
