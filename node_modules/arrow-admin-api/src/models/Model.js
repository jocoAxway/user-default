class Model {
	static get schema() {
		return {
			title: 'Model',
			properties: {
				name: {
					type: 'string'
				},
				fields: {
					type: 'object'
				},
				connector: {
					type: 'object',
					properties: {
						name: {
							type: 'string'
						}
					},
					required: [
						'name'
					]
				},
				metadata: {
					type: 'object'
				},
				autogen: {
					type: 'boolean'
				},
				actions: {
					type: 'array',
					items: {
						type: 'string'
					}
				},
				disabledActions: {
					type: 'array',
					items: {
						type: 'string'
					}
				},
				plural: {
					type: 'string'
				},
				singular: {
					type: 'string'
				},
				cache: {
					type: 'boolean'
				},
				before: {
				},
				after: {
				},
				pre: {
				},
				post: {
				},
				before$METHOD$: {
				},
				after$METHOD$: {
				},
				beforeEvent: {
					type: 'string'
				},
				afterEvent: {
					type: 'string'
				},
				eventTransformer: {
				},
				before$METHOD$Event: {
				},
				after$METHOD$Event: {
				},
				$METHOD$eventTransformer: {
				},
				documented: {
					type: 'boolean'
				},
				description: {
					type: 'string'
				},
				createDescription: {
				},
				updateDescription: {
				},
				deleteDescription: {
				},
				distinctDescription: {
				},
				findByIDDescription: {
				},
				findAndModifyDescription: {
				},
				findAllDescription: {
				},
				countDescription: {
				},
				upsertDescription: {
				},
				queryDescription: {
				}
			},
			required: [ 'fields', 'name' ]
		};
	}

	static validate(obj) {
		if (typeof (obj) !== 'object') {
			return false;
		}
		let valid = true;
		Model.schema.required.forEach(prop => {
			if (!obj.hasOwnProperty(prop)) {
				valid = false;
			}
		});
		return valid;
	}
}

exports = module.exports = Model;
