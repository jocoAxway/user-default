const APIProvider = require('../APIProvider');
const SystemConfig = require('./SystemConfig');
const SystemStatus = require('./SystemStatus');

class SystemAPI extends APIProvider {
	static bind(controller) {
		const swagger = controller.ctx.swagger;

		swagger
			.schema('SystemConfig', SystemConfig.schema);

		swagger
			.get('/system/config')
			.operationId('getSystemConfig')
			.tag('system')
			.summary('Gets the system configuration.')
			.response(200, 'OK', 'SystemConfig')
			.response(500)
			.action((req, res) => {
				try {
					controller.getConfig()
						.then(data => {
							res.status(200).send(data);
						})
						.catch((ex) => {
							// async block - errors have to be handled here
							APIProvider.handleError(ex, res, 500);
						});
				} catch (ex) {
					APIProvider.handleError(ex, res, 500);
				}
			});

		swagger
			.schema('SystemStatus', SystemStatus.schema);

		swagger
			.get('/system/status')
			.operationId('getSystemStatus')
			.tag('system')
			.summary('Check the system is available.')
			.response(200, 'OK', 'SystemStatus')
			.response(500)
			.action((req, res) => {
				try {
					controller.getStatus()
						.then(data => {
							res.status(200).send(data);
						})
						.catch((ex) => {
							// async block - errors have to be handled here
							APIProvider.handleError(ex, res, 500);
						});
				} catch (ex) {
					APIProvider.handleError(ex, res, 500);
				}
			});

		swagger
			.get('/system/reload')
			.operationId('reloadSystem')
			.tag('system')
			.summary('Reloads the server.')
			.response(204, 'No Content')
			.response(500)
			.action((req, res) => {
				try {
					res.status(204).send();
					controller.ctx.apibuilder.emit('reload');
				} catch (ex) {
					APIProvider.handleError(ex, res, 500);
				}
			});
	}
}

exports = module.exports = SystemAPI;
