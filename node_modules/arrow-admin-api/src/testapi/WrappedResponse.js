/**
* A wrapper containing the details for  an API response.
* @public
*/
class WrappedResponse {
	/**
	* Create a WrappedResponse.
	*
	* @param {object} responseWrapper - The values to initialize this WrappedResponse with.
	*/
	constructor(responseWrapper) {
		Object.assign(this, responseWrapper);

		if (!WrappedResponse.validate(this)) {
			throw new Error('Invalid wrapped response.');
		}
	}

	/**
	* The swagger schema for a WrappedResponse.
	* @return {object} - The schema for a WrappedResponse.
	*/
	static get schema() {
		return {
			title: 'Response Wrapper',
			type: 'object',
			properties: {
				success: {
					type: 'boolean'
				},
				result: {
					type: 'object'
				},
				responseTime: {
					type: 'integer'
				},
				responseSize: {
					type: 'integer'
				},
				response: {
					type: 'object',
					properties: {
						headers: {
							type: 'object'
						},
						httpVersion: {
							type: 'string'
						},
						url: {
							type: 'string'
						},
						statusCode: {
							type: 'integer'
						}
					},
					required: [
						'statusCode'
					]
				}
			},
			required: [
				'success',
				'response',
				'responseTime'
			]
		};
	}

	/**
	* Validate that object is a WrappedResponse.
	* @param {WrappedResponse|object} obj - The object to validate.
	* @return {boolean} - true if the object is a valid WrappedResponse.
	*/
	static validate(obj) {
		let valid = true;
		this.schema.required.forEach(prop => {
			if (!obj.hasOwnProperty(prop)) {
				valid = false;
			}
		});

		return valid;
	}
}

exports = module.exports = WrappedResponse;
