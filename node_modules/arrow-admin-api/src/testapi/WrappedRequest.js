/**
* A wrapper containing the details for making an API request.
* @public
*/
class WrappedRequest {
	/**
	* Create a WrappedRequest.
	*
	* @param {object} requestWrapper - The values to initialize this WrappedRequest with.
	*/
	constructor(requestWrapper) {
		Object.assign(this, requestWrapper);

		if (!WrappedRequest.validate(this)) {
			throw new Error('Invalid wrapped request.');
		}
	}

	/**
	* The swagger schema for a WrappedRequest.
	* @return {object} - The schema for a WrappedRequest.
	*/
	static get schema() {
		return {
			title: 'Request Wrapper',
			type: 'object',
			properties: {
				path: {
					type: 'string'
				},
				method: {
					type: 'string'
				},
				followRedirects: {
					type: 'boolean'
				},
				gzip: {
					type: 'boolean'
				},
				headers: {
					type: 'object'
				},
				params: {
					type: 'object',
					properties: {
						path: {
							type: 'object'
						},
						query: {
							type: 'object'
						},
						body: {
							type: 'object'
						}
					}
				}
			},
			required: [
				'path',
				'method'
			]
		};
	}

	/**
	* Validate that object is a WrappedRequest.
	* @param {WrappedRequest|object} obj - The object to validate.
	* @return {boolean} - true if the object is a valid WrappedRequest.
	*/
	static validate(obj) {
		let valid = true;
		this.schema.required.forEach(prop => {
			if (!obj.hasOwnProperty(prop)) {
				valid = false;
			}
		});

		return valid;
	}
}

exports = module.exports = WrappedRequest;
