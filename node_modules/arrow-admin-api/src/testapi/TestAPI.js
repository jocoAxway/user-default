const WrappedRequest = require('./WrappedRequest');
const WrappedResponse = require('./WrappedResponse');
const APIProvider = require('../APIProvider');
const BadRequestError = require('../errors/BadRequestError');

class TestAPI extends APIProvider {
	static bind(controller) {
		const swagger = controller.ctx.swagger;

		swagger
			.schema('WrappedRequest', WrappedRequest.schema)
			.schema('WrappedResponse', WrappedResponse.schema)
			.post('/test')
			.operationId('testapi')
			.body('WrappedRequest', 'The details of the API to test.')
			.tag('test')
			.summary('Test the API.')
			.response(200, 'OK', 'WrappedResponse')
			.response(400)
			.response(500)
			.action((req, res) => {
				let wrapper;

				try {
					try {
						wrapper = new WrappedRequest(req.body);
					} catch (ex) {
						throw new BadRequestError(ex.message);
					}

					controller.invoke(wrapper, req.headers)
						.then(data => {
							res.status(200).send(data);
						})
						.catch((ex) => {
							APIProvider.handleError(ex, res, 400, 500);
						});
				} catch (ex) {
					APIProvider.handleError(ex, res, 400, 500);
				}
			});
	}
}

exports = module.exports = TestAPI;
