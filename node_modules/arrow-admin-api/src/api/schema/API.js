class API {
	static get schema() {
		return {
			title: 'API',
			properties: {
				generated: {
					type: 'boolean'
				},
				group: {
					type: 'string'
				},
				path: {
					type: 'string'
				},
				method: {
					type: 'string'
				},
				description: {
					type: 'string'
				},
				before: {},
				after: {},
				parameters: {
					type: 'object'
				},
				txenabled: {
					type: 'boolean'
				},
				enabled: {
					type: 'boolean'
				},
				sort: {
					type: 'integer'
				},
				response: {
					type: 'object'
				},
				singular: {
					type: 'string'
				},
				plural: {
					type: 'string'
				},
				pre: {
					type: 'array',
					items: {
						type: 'string'
					}
				},
				post: {
					type: 'array',
					items: {
						type: 'string'
					}
				},
				nickname: {
					type: 'string'
				},
				key: {
					type: 'string'
				},
				filename: {
					type: 'string'
				},
				timestamp: {
					type: 'string'
				}
			},
			required: [
				'group',
				'path',
				'method',
				'description',
				'enabled'
			]
		};
	}

	static validate(api) {
		let valid = true;
		this.schema.required.forEach(prop => {
			if (!{}.hasOwnProperty.call(api, prop)) {
				valid = false;
			}
		});
		return valid;
	}
}

exports = module.exports = API;
