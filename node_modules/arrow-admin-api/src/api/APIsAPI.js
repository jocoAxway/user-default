const APIProvider = require('../APIProvider');
const API = require('./schema/API');
const GroupSummary = require('./schema/GroupSummary');
const Status = require('./schema/Status');

class APIsAPI extends APIProvider {
	static bind(controller) {
		const swagger = controller.ctx.swagger;

		swagger
			.schema('Status', Status.schema)
			.schema('API', API.schema)
			.schema('GroupSummary', GroupSummary.schema);

		/*
		swagger
			.post('/apis')
			.operationId('createAPI')
			.tag('apis')
			.summary('Create an API.')
			.body('API', 'The API to create')
			.response(201, 'Created', 'API')
			.response(400)
			.response(500)
			.action((req, res) => {
				controller.createAPI(req.body)
				.then(block => {
					res.status(201).send(block);
				})
				.catch(err => {
					APIProvider.handleError(err, res, 400, 500);
				});
			});
		*/
		swagger
			.get('/apis/summary')
			.operationId('getGroupSummaries')
			.tag('apis')
			.summary('Gets an array of API group summaries')
			.response(200, 'OK', 'GroupSummary', true)
			.response(500)
			.action((req, res) => {
				controller.getGroupSummaries()
					.then(groups => {
						res.status(200).send(groups);
					})
					.catch(err => {
						APIProvider.handleError(err, res, 400, 500);
					});
			});

		swagger
			.get('/apis/:group')
			.operationId('getGroupEndpoints')
			.tag('apis')
			.summary('Gets an array of Endpoints for a group.')
			.parameter({ in: 'path', name: 'group', type: 'string', description: 'API group to filter by.' })
			.response(200, 'OK', 'API', true)
			.response(404)
			.response(500)
			.action((req, res) => {
				const opts = {};

				if (req.params.group) {
					// decode group
					opts.group = decodeURIComponent(req.params.group);
				}

				controller.getEndpoints(opts)
					.then(APIs => {
						res.status(200).send(APIs);
					})
					.catch(err => {
						APIProvider.handleError(err, res, 404, 500);
					});
			});

		/*
		swagger
			.get('/apis/:apiName')
			.operationId('getAPI')
			.tag('apis')
			.summary('Get an API.')
			.parameter({in: 'path', name: 'apiName', type: 'string', description: 'API name.'})
			.response(200, 'OK', 'API')
			.response(404)
			.response(500)
			.action((req, res) => {
				controller.getAPI(req.params.apiName)
				.then(API => {
					res.status(200).send(API);
				})
				.catch(err => {
					APIProvider.handleError(err, res, 400, 500);
				});
			});

		swagger
			.put('/apis/:apiName')
			.operationId('updateAPI')
			.tag('apis')
			.summary('Update an API.')
			.parameter({in: 'path', name: 'apiName', type: 'string', description: 'API name.'})
			.body('API', 'The API to update')
			.response(200, 'Updated', 'API')
			.response(400)
			.response(500)
			.action((req, res) => {
				try {
					let API = controller.updateAPI(req.params.apiName, req.body);
					res.status(200).send(API);
				}
				catch (ex) {
					APIProvider.handleError(ex, res, 400, 500);
				}
			});

		swagger
			.delete('/apis/:apiName')
			.operationId('deleteAPI')
			.tag('apis')
			.summary('Deletes an API.')
			.parameter({in: 'path', name: 'apiName', type: 'string', description: 'API name.'})
			.response(204)
			.response(400)
			.response(500)
			.action((req, res) => {
				try {
					controller.deleteAPI(req.params.apiName);
					res.sendStatus(204);
				}
				catch (ex) {
					APIProvider.handleError(ex, res, 400, 500);
				}
			});
			*/
	}
}

exports = module.exports = APIsAPI;
