const NotFoundError = require('../errors/NotFoundError');

class APIsController {
	constructor(ctx) {
		this.ctx = ctx;
	}

	/*
	 * returns an array of summaries (group name, endpoint count)
	 * for each API group
	 */
	getGroupSummaries() {
		return new Promise(resolve => {
			const groups = {},
				summaries = this.ctx.apibuilder.apis.filter(api => {
					if (!api.enabled) {
						return false;
					}
					return {}.hasOwnProperty.call(groups, api.group)
						? !(++groups[api.group])
						: (groups[api.group] = 1);
				})
					.map(api => ({
						id: api.group,
						name: api.group,
						endpointCount: groups[api.group]
					}));
			resolve(summaries);
		});
	}

	/*
	 * returns endpoints for all APIs
	 * opts.group : filters based on group name
	 */
	getEndpoints(opts) {
		const group = opts && opts.group;
		return new Promise(resolve => {
			// clean up some stuff from the api object
			let apis = this.ctx.apibuilder.apis.map(api => {
				const clone = JSON.parse(JSON.stringify(api));
				delete clone.apibuilder;
				delete clone.config;
				delete clone.model;
				return clone;
			});

			// perform the endpoint filter
			apis = apis.filter(api =>
				// remove disabled apis
				api.enabled
				// filter based on optional group param
				&& (group ? api.group === group : true)
			);

			// throw an error if there's a group specified and nothing matches
			if (group && !apis.length) {
				throw new NotFoundError();
			}

			resolve(apis);
		});
	}
}

exports = module.exports = APIsController;
