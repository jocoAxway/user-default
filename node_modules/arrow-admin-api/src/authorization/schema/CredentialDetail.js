class CredentialDetail {
	/**
	 * Create a ServerConfiguration.
	 *
	 * @param {string} name - The credential name.
	 * @param {object} options - The additional options.
	 */
	constructor(name, options) {
		this.name = name;
		Object.assign(this, options || {});

		if (!CredentialDetail.validate(this)) {
			throw new Error('Invalid credential detail');
		}
	}

	static get schema() {
		return {
			title: 'Credential Detail',
			type: 'object',
			properties: {
				name: {
					type: 'string'
				},
				status: {
					type: 'object',
					properties: {
						credential: { type: 'string' },
						action: { type: 'string' }
					}
				}
			},
			required: [
				'name'
			]
		};
	}

	static validate(credentialDetail) {
		let valid = true;
		this.schema.required.forEach(prop => {
			if (!Object.hasOwnProperty.call(credentialDetail, prop) || credentialDetail[prop] === undefined) {
				valid = false;
			}
		});
		return valid;
	}
}

exports = module.exports = CredentialDetail;
