const { getShortName } = require('../util');

const deleteAPI = (name, schemaRef, model) => ({
	schemaVersion: '4',
	info: {
		name
	},
	parameter: {
		properties: {
			params: {
				type: 'object',
				description: 'The parameters from the endpoint.',
				properties: {
					[model.getPrimaryKeyName()]: {
						description: `The ${model.name} ID`,
						type: model.getPrimaryKeyType()
					}
				},
				required: [
					model.getPrimaryKeyName()
				]
			},
			request: {
				type: 'object',
				description: 'The HTTP request.'
			},
			config: {
				type: 'object',
				description: 'The service\'s configuration'
			},
			env: {
				type: 'object',
				description: 'The host OS environment'
			}
		},
		additionalProperties: false,
		required: [
			'params',
			'request',
			'config',
			'env'
		]
	},
	start: 'model.delete',
	nodes: {
		'model.delete': {
			type: `nodehandler://api-builder-flow-invoke/model/${model.name}`,
			method: 'delete',
			name: `Delete ${getShortName(model)}`,
			parameters: [
				{
					name: `${model.getPrimaryKeyName()}`,
					value: `$.params.${model.getPrimaryKeyName()}`
				}
			],
			outputs: {
				next: {
					context: '$.delete',
					routes: [ 'response.success' ]
				},
				notfound: {
					routes: [ 'response.error.notfound' ]
				}
			}
		},
		'response.success': {
			type: 'nodehandler://axway-flow/http',
			name: 'Set success response',
			method: 'setresponse',
			parameters: [
				{
					name: 'status',
					value: '204',
					type: 'number'
				}
			],
			outputs: {
				next: {
					context: '$.response'
				}
			}
		},
		'response.error.notfound': {
			type: 'nodehandler://axway-flow/http',
			name: 'Set not found response',
			method: 'setresponse',
			parameters: [
				{
					name: 'status',
					value: '404',
					type: 'number'
				}
			],
			outputs: {
				next: {
					context: '$.response'
				}
			}
		}
	}
});

exports = module.exports = deleteAPI;
