const APIProvider = require('../APIProvider');

/**
 * API for interacting with the Codeblocks.
 * @public
 */
class CodeblocksAPI extends APIProvider {
	/**
     * Bind the paths to the controller methods.
     *
     * @param {CodeblocksController} controller - The main controller providing the
	 *                                         implementation for this API.
     */
	static bind(controller) {
		const swagger = controller.ctx.swagger;

		// https://techweb.axway.com/jira/browse/RDPP-2086
		// FIXME: Swagger 2.0 only supports a limited subset of JSON schema draft 04.
		// See: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object
		// This means that it is not possible to represent our flow schema in a Swagger 2.0
		// document because we use things like (oneOf, allOf).  The only choice here is to upgrade to
		// use Swagger 3.0, which allegedly supports them
		// See: https://blog.readme.io/an-example-filled-guide-to-swagger-3-2/#formatchanges
		// When fixed, replace with:
		const codeblockmetadata = {
			// $ref: 'http://axway.com/schemas/codeblockmetadata.json'
			type: 'object'
		};

		swagger
			.get('/codeblocks')
			.operationId('getCodeblocks')
			.tag('codeblock')
			.summary('Gets an array of Codeblocks.')
			.response(200, 'OK', {
				type: 'array',
				items: {
					...codeblockmetadata
				}
			})
			.response(500)
			.action((req, res) => {
				controller.getCodeblocks()
					.then(codeblocks => {
						res.status(200).send(codeblocks);
					})
					.catch(err => {
						APIProvider.handleError(err, res, 500);
					});
			});

		swagger
			.get('/codeblocks/:name')
			.operationId('getCodeblockByName')
			.tag('codeblock')
			.summary('Gets the specified codeblock.')
			.parameter({ in: 'path', name: 'name', type: 'string', description: 'Name of codeblock to retrieve.' })
			.response(200, 'OK', codeblockmetadata)
			.response(400)
			.response(404)
			.response(500)
			.action((req, res) => {
				let name;
				if (req.params.name) {
					name = decodeURIComponent(req.params.name);
				}
				controller.getCodeblock(name)
					.then(APIs => {
						res.status(200).send(APIs);
					})
					.catch(err => {
						APIProvider.handleError(err, res, 400, 404, 500);
					});
			});
	}
}

exports = module.exports = CodeblocksAPI;
