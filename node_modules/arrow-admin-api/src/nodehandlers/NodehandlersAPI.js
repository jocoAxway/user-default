const APIProvider = require('../APIProvider');

/**
 * API for interacting with the Nodehandlers.
 * @public
 */
class NodehandlersAPI extends APIProvider {
	/**
	 * Bind the paths to the controller methods.
	 *
	 * @param {Nodehandlers} controller - The main controller providing the
	 *                                         implementation for this API.
	 */
	static bind(controller) {
		const swagger = controller.ctx.swagger;

		// https://techweb.axway.com/jira/browse/RDPP-2086
		// FIXME: Swagger 2.0 only supports a limited subset of JSON schema draft 04.
		// See: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object
		// This means that it is not possible to represent our flow schema in a Swagger 2.0
		// document because we use things like (oneOf, allOf).  The only choice here is to upgrade to
		// use Swagger 3.0, which allegedly supports them
		// See: https://blog.readme.io/an-example-filled-guide-to-swagger-3-2/#formatchanges
		// When fixed, replace with:
		const nodeschema = {
			// $ref: 'http://axway.com/schemas/flowschema.json#/node-handler-schema'
			type: 'object'
		};

		swagger
			.get('/nodehandlers/:type')
			.operationId('getNodeSpec')
			.tag('nodehandler')
			.summary('Gets the specification for a particular node handler.')
			.parameter({
				in: 'path',
				name: 'type',
				type: 'string',
				description: 'type of node handler to get the spec from.'
			})
			.response(200, 'OK', nodeschema)
			.response(404)
			.response(500)
			.action((req, res) => {
				let type;
				if (req.params.type) {
					type = decodeURIComponent(req.params.type);
				}
				controller.getFlowNodeSpec(type)
					.then(spec => {
						res.status(200).send(spec);
					})
					.catch(err => {
						APIProvider.handleError(err, res, 404, 500);
					});
			});

		swagger
			.get('/nodehandlers')
			.operationId('getNodeSpecs')
			.tag('nodehandler')
			.summary('Gets all specification for registered node handlers.')
			.response(200, 'OK', {
				type: 'array',
				items: {
					...nodeschema
				}
			})
			.response(404)
			.response(500)
			.action((req, res) => {
				controller.getFlowNodeSpecs()
					.then(specs => {
						res.status(200).send(specs);
					})
					.catch(err => {
						APIProvider.handleError(err, res, 404, 500);
					});
			});
	}
}

exports = module.exports = NodehandlersAPI;
