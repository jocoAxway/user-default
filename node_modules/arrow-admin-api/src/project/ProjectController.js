const path = require('path');

/**
 * The controller implementing the actions for interacting with the service.
 * @public
 */
class ProjectController {
	/**
     * Create a ProjectController.
     * @param {object} ctx - The context for this controller.
     * @param {express} ctx.app - The express application.
     * @param {string} ctx.prefix - The prefix bound to.
     * @param {APIBuilder} ctx.apibuilder - The API Builder server.
     * @param {Swagger} ctx.swagger - openapi-doc instance.
     */
	constructor(ctx) {
		this.ctx = ctx;
	}

	/**
     * Get the service summary.
	 *
     * @return {object} summary - The service summary.
     * @return {string} summary.name - The service name.
     * @return {string} summary.version - The service version.
     * @return {string} summary.author - The service author.
     * @return {string} summary.description - The service description.
     * @return {string} summary.license - The service license.
     * @return {string} summary.apikey - The service apikey.
     * @return {string} summary.apiPrefixSecurity - The security applied to the apiPrefix.
     */
	getSummary() {
		return new Promise((resolve) => {
			const config = this.ctx.apibuilder.config;

			let summary = {};

			const packagePath = path.join(config.dir, 'package');

			try {
				// eslint-disable-next-line security/detect-non-literal-require
				const pkg = require(packagePath);

				summary = {
					name: pkg.name,
					version: pkg.version,
					author: pkg.author,
					description: pkg.description,
					license: pkg.license,
					apikey: config.apikey,
					apiPrefixSecurity: config.accessControl.apiPrefixSecurity
				};
			} catch (importError) {
				// Project didn't have a package.json at the given location, resolve with an empty object
			}

			resolve(summary);
		});
	}
}

exports = module.exports = ProjectController;
