/**
 * The API Builder server configuration.
 * @public
 */
class ServerConfiguration {
	/**
	 * Create a ServerConfiguration.
	 *
	 * @param {string} name - The configuration file name..
	 * @param {string} content - The content of the configuration file.
	 */
	constructor(name, content) {
		this.name = name;
		content && (this.content = content);

		if (!ServerConfiguration.validate(this)) {
			throw new Error('Invalid server configuration');
		}
	}

	/**
	 * The swagger schema for a SystemConfig.
	 * @return {object} - The schema for a SystemConfig.
	 */
	static get schema() {
		return {
			title: 'Server Configuration',
			type: 'object',
			properties: {
				name: {
					type: 'string'
				},
				content: {
					type: 'string'
				}
			},
			required: [
				'name'
			]
		};
	}

	/**
	 * Validate that object is a ServerConfiguration.
	 * @param {ServerConfiguration|object} obj - The object to validate.
	 * @return {boolean} - true if the object is a valid ServerConfiguration.
	 */
	static validate(obj) {
		let valid = true;
		ServerConfiguration.schema.required.forEach(prop => {
			if (!obj.hasOwnProperty(prop)) {
				valid = valid && false;
			} else {
				valid = valid && (obj[prop] !== undefined);
			}
		});

		return valid;
	}
}

exports = module.exports = ServerConfiguration;
