const APIProvider = require('../APIProvider');
const ServerConfiguration = require('./ServerConfiguration');

class ConfigurationAPI extends APIProvider {
	static bind(controller) {
		const swagger = controller.ctx.swagger;

		swagger
			.schema('ServerConfiguration', ServerConfiguration.schema);

		swagger
			.get('/config')
			.operationId('listConfigs')
			.tag('config')
			.summary('Lists all the server configuration files.')
			.response(200, 'OK', 'ServerConfiguration', true)
			.response(400)
			.response(404)
			.response(500)
			.action((req, res) => {
				try {
					controller.listConfigs()
						.then(data => {
							res.status(200).send(data);
						})
						.catch((ex) => {
							APIProvider.handleError(ex, res, 400, 404, 500);
						});
				} catch (ex) {
					APIProvider.handleError(ex, res, 500);
				}
			});

		swagger
			.get('/config/:name')
			.operationId('getConfig')
			.tag('config')
			.summary('Get the specified server configuration file.')
			.parameter({ in: 'path', name: 'name', type: 'string', description: 'The name of the configuration file.' })
			.response(200, 'OK', 'ServerConfiguration')
			.response(400)
			.response(404)
			.response(500)
			.action((req, res) => {
				try {
					controller.getConfig(req.params.name)
						.then(data => {
							res.status(200).send(data);
						})
						.catch((ex) => {
							APIProvider.handleError(ex, res, 400, 404, 500);
						});
				} catch (ex) {
					APIProvider.handleError(ex, res, 500);
				}
			});

		swagger
			.put('/config/:name')
			.operationId('updateConfig')
			.tag('config')
			.summary('Update the configuration file.')
			.parameter({ in: 'path', name: 'name', type: 'string', description: 'The name of the configuration file.' })
			.body('ServerConfiguration', 'The server configuration to save.')
			.response(204, 'No Content')
			.response(400)
			.response(404)
			.response(500)
			.action((req, res) => {
				try {
					controller.updateConfig(req.params.name, req.body)
						.then(() => {
							res.status(204).send();
							controller.ctx.apibuilder.emit('reload');
						})
						.catch((ex) => {
							APIProvider.handleError(ex, res, 400, 404, 500);
						});
				} catch (ex) {
					APIProvider.handleError(ex, res, 500);
				}
			});
	}
}

exports = module.exports = ConfigurationAPI;
