
function mockmethod(flownode, name, ctx) {
	const method = flownode.methods[name];
	if (!method) {
		throw new Error(`failed to find method: ${name}`);
	}

	const req = { params: {} };
	Object.keys(method.parameter.properties).forEach((param) => {
		req.params[param] = ctx[param];
	});

	return new Promise((resolve) => {
		const cb = (...args) => {
			resolve(args);
		};

		Object.keys(method.outputs).forEach((output) => {
			cb[output] = (...args) => {
				resolve({
					[output]: args
				});
			};
		});
		method.action(req, cb);
	});
}

function mocknode(flownodes, name) {
	const flownode = flownodes[name];
	if (!flownode) {
		throw new Error(`failed to find flownode for: ${name}`);
	}
	return {
		invoke: mockmethod.bind(null, flownode)
	};
}

function mockflownodes(node) {
	return {
		node: mocknode.bind(null, node.flownodes)
	};
}

exports = module.exports = mockflownodes;
