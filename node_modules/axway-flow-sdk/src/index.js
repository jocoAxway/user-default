const { v2: flowschema } = require('axway-flow-schema');
const fs = require('fs');
const Ajv = require('ajv');
const path = require('path');
const mocknode = require('./mocknode');

/**
 * @module axway-flow-sdk
 */

/**
 * @class
 */
class NodeBuilder {
	/**
	 * @param {object} srcModule - a node module
	 * @private
	 */
	constructor(srcModule) {
		if (!srcModule) {
			throw new Error('expected a node module');
		}
		this._package(srcModule);
		this.clear();
	}

	_package(srcModule) {
		// find the package.json
		const pkgpath = srcModule.paths.reduce((acc, cur) => {
			if (!acc) {
				const fname = path.join(path.dirname(cur), 'package.json');
				if (fs.existsSync(fname)) {
					return fname;
				}
			}
			return acc;
		}, null);
		if (!pkgpath) {
			throw new Error('expected a node module and package.json');
		}
		const pkg = JSON.parse(fs.readFileSync(pkgpath));
		this.name = pkg.name;
		this.description = pkg.description;
		this.modulePath = path.dirname(pkgpath);
	}

	/**
	 * Clears all flownodes.
	 * @private
	 * @return {NodeBuilder} The current object (this).
	 */
	clear() {
		this.flownodes = {};
		this._name = null;
		this._method = null;
		return this;
	}

	/**
	 * Adds a new flownode and prepares the `NodeBuilder` to accept the following flownode
	 * operations:
	 * - {@link module:axway-flow-sdk~NodeBuilder#method .method(key, [options])}
	 * - {@link module:axway-flow-sdk~NodeBuilder#output .output(key, [options])}
	 *
	 * The `key` parameter is used to uniquely identify the flownode and represents a distinct
	 * instance of a node for the flow editor.  The `key` will be used as the name unless the
	 * `name` option is provided.  The new node will appear under the "general" category
	 * by default, or under the provided `category` option.
	 *
	 * The `icon` option can be bmp, jpeg, png, gif, tiff, or  svg file.  After,
	 * {@link module:axway-flow-sdk~NodeBuilder#method .method}
	 * can be used to add method(s), and
	 * {@link module:axway-flow-sdk~NodeBuilder#output .output} can be used to
	 * define an output.  When done,
	 * {@link module:axway-flow-sdk~NodeBuilder#action .action} can be used to
	 * define an action function and finish the flownode.
	 *
	 * @public
	 * @param {string} key - A unique key identifier for the node.
	 * @param {object=} options - Options for the node.
	 * @param {string=} options.name - A friendly name for the node as it will appear in the UI.
	 * @param {string=} options.icon - An icon file.
	 * @param {string=} options.description - A description for the node.
	 * @param {string} [options.category=general] - A category under which the node will appear
	 * 		in the UI (defaults to "general").
	 * @return {NodeBuilder} The current object (this).
	 * @example
	 * sdk.init(module).add('encodeURI', { icon: 'encode.svg' });
	 */
	add(key, options = {}) {
		if (this.flownodes[key]) {
			throw new Error(`node already exists: ${key}`);
		}
		if (this._name && this._method) {
			if (!this.flownodes[this._name].methods[this._method].action) {
				throw new Error(`method requires \`action\`: ${this._method}`);
			}
		}
		if (!key) {
			throw new Error('missing required parameter: key');
		}

		if (!this.flownodes[key]) {
			this._name = key;
			this._method = null;

			this.flownodes[key] = {
				schemaVersion: '1',
				name: options.name || key,
				type: 'nodehandler://', // This is updated by API Builder on load
				description: options.description || this.description || null,
				icon: 'icon-GG-question-sign',
				category: options.category || 'general',
				methods: {}
			};
			options.icon && this._icon(options.icon);

			if (!this.flownodes[key].description) {
				// remove unused
				delete this.flownodes[key].description;
			}
			if (!this.flownodes[key].name) {
				// remove unused
				delete this.flownodes[key].name;
			}
		}
		return this;
	}

	_icon(file) {
		const match = file.match(/\.(?:bmp|jpeg|jpg|png|gif|tiff|svg)$/);
		if (!match) {
			throw new Error(`file must be bmp, jpg, jpeg, png, gif, tiff, or svg: ${file}`);
		}
		const ficon = path.join(this.modulePath, file);
		if (!fs.existsSync(ficon)) {
			throw new Error(`file does not exist: ${file}`);
		}
		let type = match[0].substr(1);
		if (type === 'svg') {
			type = 'svg+xml';
		} else if (type === 'jpg') {
			type = 'jpeg';
		}
		const data = fs.readFileSync(ficon).toString('base64');
		this.flownodes[this._name].icon = `data:image/${type};base64,${data}`;
		return this;
	}

	/**
	 * Adds a new method to the current node flownode and prepares the `NodeBuilder`
	 * to accept the following method operations:
	 * - {@link module:axway-flow-sdk~NodeBuilder#parameter .parameter(name, schema, [required])}
	 * - {@link module:axway-flow-sdk~NodeBuilder#action .action(handler)}
	 *
	 * {@link module:axway-flow-sdk~NodeBuilder#add .add(key, [options])} must be
	 * called prior to adding a method.
	 *
	 * The `key` uniquely identifies the method for the node and will be used as
	 * the name unless the `name` option is provided.
	 *
	 * @public
	 * @param {string} key - A unique key identifier for the method.
	 * @param {object=} options - Options for the method.
	 * @param {string=} options.name - A friendly name for the method as it will appear in the UI.
	 * @param {string=} options.description - A description for the method.
	 * @return {NodeBuilder} The current object (this).
	 * @example
	 * sdk.init(module).add('encodeURI', { icon: 'encode.svg' })
	 *	.method('encode', { name: 'Encode URI' });
	 */
	method(key, options = {}) {
		if (!this._name) {
			throw new Error('need to start a flow-node using: `node`');
		}
		if (!key) {
			throw new Error('missing required parameter: key');
		}
		this.flownodes[this._name].methods[key] = {
			name: options.name,
			description: options.description,
			parameter: {
				type: 'object',
				properties: {},
				required: [],
				additionalProperties: false
			},
			outputs: {}
		};
		if (!this.flownodes[this._name].methods[key].description) {
			// remove unused
			delete this.flownodes[this._name].methods[key].description;
		}
		if (!this.flownodes[this._name].methods[key].name) {
			// remove unused
			delete this.flownodes[this._name].methods[key].name;
		}
		this._method = key;
		return this;
	}

	/**
	 * Adds a new parameter to the current method.  Any number of parameters can be added to a method.
	 *
	 * {@link module:axway-flow-sdk~NodeBuilder#method .method(key, [options])} must be
	 * called prior to adding a parameter.
	 *
	 * The `name` uniquely identifies the the parameter, and the `schema` is a valid
	 * {@link http://json-schema.org JSON Schema} definition (both
	 * {@link http://json-schema.org/draft-04/schema draft-04} and
	 * {@link http://json-schema.org/draft-06/schema draft-06} are supported).
	 *
	 * @public
	 * @param {string} name - A unique name for the parameter as it will appear in the UI.
	 * @param {object} schema - A schema used to validate the parameter.
	 * @param {boolean} [required=true] - A flag to indicate the parameter is required or optional.
	 * @return {NodeBuilder} The current object (this).
	 * @example
	 * sdk.init(module).add('encodeURI', { icon: 'encode.svg' })
	 *	.method('encode', { name: 'Encode URI' })
	 *	.parameter('uri', { type: 'string' });
	 */
	parameter(name, schema, required = true) {
		if (!this._name) {
			throw new Error('need to start a flow-node using: `node`');
		}
		if (!this._method) {
			throw new Error('need to start a method using: `method`');
		}
		if (!name) {
			throw new Error('missing required parameter: name');
		}
		if (!schema) {
			throw new Error('missing required parameter: schema');
		}
		const ajv = new Ajv({ unknownFormats: 'ignore' });
		ajv.addFormat('multiline', () => true);
		ajv.compile(schema);

		this.flownodes[this._name].methods[this._method].parameter.properties[name] = schema;
		if (required) {
			this.flownodes[this._name].methods[this._method].parameter.required.push(name);
		}
		return this;
	}

	/**
	 * Adds a new output to the current method.  Any number of outputs can be added to a method,
	 * but for usability-sake, you should limit this.  The `output` represents one of the possible
	 * callback routes for your method.  For example, if your method tested prime numbers, then
	 * one output might be `prime`, and the other `not-prime`.
	 *
	 * {@link module:axway-flow-sdk~NodeBuilder#method .method(key, [options])}
	 * must be called prior to adding an output.
	 *
	 * The `key` uniquely identifies the the output route.  The `schema` is a valid
	 * {@link http://json-schema.org JSON Schema} definition (both
	 * {@link http://json-schema.org/draft-04/schema draft-04} and
	 * {@link http://json-schema.org/draft-06/schema draft-06} are supported).
	 * If `schema` is not provided, then the output type is effectively _any_ type.
	 *
	 * The `context` is a valid {@link https://github.com/json-path/JsonPath JSON Path} and
	 * is used as the default by the flow editor.  When the output is invoked, the configured
	 * context is where the output value will be written.
	 *
	 * @public
	 * @param {string} key - A unique key for the output.
	 * @param {object=} options - output options
	 * @param {string=} options.name - A friendly name for the output as it will appear in
	 *		the UI.
	 * @param {string=} options.description - The output description.
	 * @param {string=} options.context - The default context string.
	 * @param {object=} options.schema - The expected JSON schema for the output value.
	 * @return {NodeBuilder} The current object (this).
	 * @example
	 * sdk.init(module).add('encodeURI', { icon: 'encode.svg' })
	 *	.method('encode', { name: 'Encode URI' })
	 *	.parameter('uri', { type: 'string' })
	 *	.output('encoded', { context: '$.encodedURI', schema: { type: 'string' } });
	 */
	output(key, options = {}) {
		if (!this._name) {
			throw new Error('need to start a flow-node using: `node`');
		}
		const output = this.flownodes[this._name].methods[this._method].outputs[key] = {};
		[ 'name', 'description', 'context', 'schema' ].forEach(
			a => options[a] && (output[a] = options[a])
		);
		return this;
	}

	/**
	 * Assigns an action {@link module:axway-flow-sdk~handler `handler`} to
	 * the current method.  The method can only have one action handler.  Assigning an action will
	 * terminate the current method definition.
	 * @public
	 * @param {handler} handler - The action {@link module:axway-flow-sdk~handler `handler`}
	 * 		function.
	 * @return {NodeBuilder} The current object (this).
	 * @example
	 * sdk.init(module).add('encodeURI', { icon: 'encode.svg' })
	 *	.method('encode', { name: 'Encode URI' })
	 *	.parameter('uri', { type: 'string' })
	 *	.output('encoded', { context: '$.encodedURI', schema: { type: 'string' } })
	 *	.action((req, cb) => cb.encoded(null, encodeURI(req.params.uri));
	 */
	action(handler) {
		if (!this._name) {
			throw new Error('need to start a flow-node using: `node`');
		}
		if (!handler) {
			throw new Error('missing required parameter: handler');
		}
		if (typeof handler !== 'function') {
			throw new Error('expected handler to be a function');
		}
		if (handler.length !== 2) {
			throw new Error('expected handler function to have signature: (req, callback)');
		}
		this.flownodes[this._name].methods[this._method].action = handler;
		// finish the method
		this._method = null;
		return this;
	}

	// THIS IS OKAY - this defines a function
	/**
	 * A handler function to perform the node method's action.  The function will receive all
	 * of the provided parameters in `req.params`.  If any parameters are not provided, or are
	 * of the wrong time, or some have defaults, your function will need to handle those
	 * situations.  On success, your function should invoke one of the named `output`.  On error,
	 * your function should invoke the callback with a non-null `err` value.
	 *
	 * @example
	 * cb.encoded(null, uncodeURI(req.params.uri));
	 *
	 * @example
	 * cb('error!');
	 *
	 * @public
	 * @callback handler
	 * @param {Request} req - The {@link module:axway-flow-sdk~Request `Request`}
	 *		object.
	 * @param {flowCallback} cb - The output
	 *		{@link module:axway-flow-sdk~flowCallback `callback`}.
	 */

	// THIS IS OKAY - this defines a function
	/**
	 * A callback function that your method
	 *		{@link module:axway-flow-sdk~handler `handler`} must invoke.
	 *
	 * @public
	 * @callback flowCallback
	 * @param {*} [err] - A non `null` value indicates a terminal error (flow processing will stop).
	 * @param {*} [value] - The output value to be written back to the flow processing context.
	 */

	// THIS IS OKAY - this defines a type
	/**
	 * The request object.
	 * @typedef {object} Request
	 * @property {object} env - The service configuration.
	 * @property {object} params - The method params, as supplied during runtime
	 *		(see {@link module:axway-flow-sdk~NodeBuilder#parameter .parameter}).
	 */
}

/**
 * Axway API Builder SDK for creating custom nodes to work with flows.
 * @typicalname init
 * @param {object} module - The node module.
 * @return {NodeBuilder} A newly constructed
 *		{@link module:axway-flow-sdk~NodeBuilder `NodeBuilder`} object
 * @function
 * @example
 * const sdk = require('axway-flow-sdk');
 * exports = module.exports = sdk.init(module);
 */
function init(module) {
	return new NodeBuilder(module);
}

function validateFlownode(flownode) {
	const ajv = new Ajv({ unknownFormats: 'ignore' });
	ajv.addSchema(flowschema);

	// Validate the flownode
	const schemaValidate = ajv.getSchema(
		'http://axway.com/schemas/flowschema.json#/node-handler-schema'
	);

	if (!schemaValidate(flownode)) {
		const errMsg = schemaValidate.errors.map(err => {
			const dataPath = err.dataPath ? `$${err.dataPath}` : 'node-handler-schema root';
			return `at schema ${err.schemaPath}, ${dataPath} ${err.message} (${JSON.stringify(err.params)})`;
		}).join('. ');
		throw new Error(errMsg);
	}

	// Validate the methods action
	Object.keys(flownode.methods).forEach((methodKey) => {
		const method = flownode.methods[methodKey];
		if (!method || !method.action || typeof method.action !== 'function') {
			throw new Error(`method ${methodKey} expected action to be a function`);
		}
		if (method.action.length !== 2) {
			throw new Error(`method ${methodKey} expected action function to have signature: (req, callback)`);
		}
	});
}

/**
 * Validates the flownodes against the Axway Flow schema.
 * @public
 * @param {NodeBuilder} nodes - nodes to validate
 * @example
 * const nodes = sdk.init(module).add('encodeURI', { icon: 'encode.svg' })
 *	.method('encode', { name: 'Encode URI' })
 *	.parameter('uri', { type: 'string' })
 *	.output('encoded', { context: '$.encodedURI', schema: { type: 'string' } })
 *	.action((req, cb) => cb.encoded(null, encodeURI(req.params.uri));
 * sdk.validate(nodes);
 * @throws {Error} If nodes contains invalid flownodes.
 */
function validate(nodes) {
	Object.values(nodes.flownodes).forEach((flownode) => {
		validateFlownode(flownode);
	});
}
exports = module.exports = {
	init,
	validate,
	mocknode
};
