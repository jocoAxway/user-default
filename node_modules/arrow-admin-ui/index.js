/* global $conf */

const fs = require('fs');
const path = require('path');
const apiBuilderConfig = require('@axway/api-builder-config');
const uiConf = require('./config');

function makeIndexPage(filename) {
	return fs.readFileSync(filename).toString()
		.replace(/{{PREFIX}}/g, $conf.prefix)
		.replace(/{{CONFIG}}/g, 'window.$conf = ' + JSON.stringify($conf));
}

function Admin(express, apibuilder, app, config) {
	var indexFile;
	var isDev = false;

	// ADMIN_DIST = "disable hot reloading and use dist instead"
	// If this is enabled make sure you've run a build first.
	if (!process.env.ADMIN_DIST) {
		try {
			fs.statSync(path.join(__dirname, 'src'));
			isDev = true;
		} catch (err) {
			isDev = false;
		}
	}

	global.$conf = {};
	// non-ES6 clone uiConf to global.$conf
	for (let key in uiConf) {
		if (uiConf.hasOwnProperty(key)) {
			global.$conf[key] = uiConf[key];
		}
	}

	$conf.prefix = config.createprefix || $conf.prefix;
	$conf.apiprefix = config.apiprefix || $conf.apiprefix;
	$conf.apiDocPrefix = config.apiDocPrefix || $conf.apiDocPrefix;
	$conf.devMode = isDev;

	$conf.adminRequestLimit = (config.admin && config.admin.request && config.admin.request.limit) || $conf.adminRequestLimit || (10 * 1000 * 1000);
	$conf.flags = apiBuilderConfig.flags;

	// Redirect requests from old admin URL
	app.use('/arrow', (req, res, next) => {
		res.redirect($conf.prefix);
		next();
	});

	if (isDev) {
		apibuilder.logger.info('Running API Builder Console in development mode.');
		var webpack = require('webpack'),
			webpackConfig = require('./webpack.config')('dev'),
			webpackDevMiddleware = require('webpack-dev-middleware'),
			webpackHotMiddleware = require('webpack-hot-middleware'),
			compiler = webpack(webpackConfig),
			packedHandler = webpackDevMiddleware(compiler, {
				log: apibuilder.logger,
				stats: {
					colors: true,
					// Only log errors and warnings. SAVE THE TERMINAL!
					hash: false,
					version: false,
					timings: false,
					assets: false,
					chunks: false,
					chunkModules: false
				},
				publicPath: webpackConfig.output.publicPath
			});
		app.use(packedHandler);
		app.use(webpackHotMiddleware(compiler, {
			path: `${$conf.prefix}/__webpack_hmr`,
			heartbeat: 2 * 1000
		}));
		app.use($conf.prefix, express.static(path.join(__dirname, './src')));
		indexFile = path.join(__dirname, './src/index.tmpl.html');
	} else {
		app.use($conf.prefix, express.static(path.join(__dirname, './dist')));
		indexFile = path.join(__dirname, './dist/index.tmpl.html');
	}

	const indexHtml = makeIndexPage(indexFile);

	app.use((req, resp, next) => {
		// webpack understands that it generated /(prefix)/assets, and that
		// static files can exist in ./src under /(prefix)/*, but it does not
		// understand that /(prefix)/api might be a valid route in the UI.
		// if it starts with '/(prefix)' and has not yet hit a handler, then
		// treat it as static index file.
		if (req.path.startsWith($conf.prefix)) {
			resp.set('Content-Type', 'text/html');
			resp.send(indexHtml || '<html></html>');
			return;
		}
		next();
	});
}

exports = module.exports = Admin;
